[{"authors":null,"categories":["R"],"content":" Objective Having been working in environmental science for several years now, entirely using R, I’ve come to greatly appreciate environmental data sources that are easy to access. If you are reading this text now however, that probably means that you, like me, have found that this often is not the case. The struggle to get data is real. But it shouldn’t be. Most data hosting organisations do want scientists to use their data and do make it freely available. But sometimes it feels like the path to access was designed by crab people, rather than normal topside humans. I recently needed to gather several new data products and in classic ‘cut your nose off to spite your face’ fashion I insisted on doing all of it directly through an R script that could be run in RStudio. Besides being stubborn, one of the main reasons I felt this was necessary is that I wanted these download scripts to be able to be run operationally via a cron job. I think I came out pretty successful in the end so wanted to share the code with the rest of the internet. Enjoy.\n# Packages not available via CRAN remotes::install_github(\u0026quot;skgrange/threadr\u0026quot;) remotes::install_github(\u0026quot;markpayneatwork/RCMEMS\u0026quot;) # The packages we will use library(tidyverse) # A staple for most modern data management in R library(RCurl) # For helping R to make sense of URLs for web hosted data library(XML) # For reading the HTML tables created by RCurl library(tidync) # For easily dealing with NetCDF data library(doParallel) # For parallel processing library(threadr) # For downloading from FTP sites that require user credentials library(RCMEMS) # For subsetting CMEMS data before download  Downloading NOAA OISST I’ve already written a post about how to download NOAA OISST data using the rerddap package which may be found here. That post talks about how to get subsets of NOAA data, which is useful for projects with a refined scope, but it is laboriously slow if one simply wants the full global product. It must also be noted that as of this writing (June 3rd, 2020) the new OISST v2.1 data were not yet available on the ERDDAP server even though the old v2 data have now been rendered unavailable. For the time being it is necessary to download the full global data and then subset down to one’s desired study area. The following section of this blog post will outline how to do that.\nI need to stress that this is a very direct and unlimited method for accessing these data and I urge responsibility in only downloading as much data as are necessary. Please do not download the entire dataset just because you can.\n# First we tell R where the data are on the interwebs OISST_url_month \u0026lt;- \u0026quot;https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/\u0026quot; # Then we pull that into a happy format # There is a lot here so it takes ~1 minute OISST_url_month_get \u0026lt;- getURL(OISST_url_month) # Before we continue let\u0026#39;s set a limit on the data we are going to download # NB: One should not simply download the entire dataset just because it is possible. # There should be a compelling reason for doing so. start_date \u0026lt;- as.Date(\u0026quot;2019-01-01\u0026quot;) # Now we strip away all of the unneeded stuff to get just the months of data that are available OISST_months \u0026lt;- data.frame(months = readHTMLTable(OISST_url_month_get, skip.rows = 1:2)[[1]]$Name) %\u0026gt;% mutate(months = lubridate::as_date(str_replace(as.character(months), \u0026quot;/\u0026quot;, \u0026quot;01\u0026quot;))) %\u0026gt;% filter(months \u0026gt;= max(lubridate::floor_date(start_date, unit = \u0026quot;month\u0026quot;))) %\u0026gt;% # Filtering out months before Jan 2019 mutate(months = gsub(\u0026quot;-\u0026quot;, \u0026quot;\u0026quot;, substr(months, 1, 7))) %\u0026gt;% na.omit() # Up next we need to now find the URLs for each individual day of data # To do this we will wrap the following chunk of code into a function so we can loop it more easily OISST_url_daily \u0026lt;- function(target_month){ OISST_url \u0026lt;- paste0(OISST_url_month, target_month,\u0026quot;/\u0026quot;) OISST_url_get \u0026lt;- getURL(OISST_url) OISST_table \u0026lt;- data.frame(files = readHTMLTable(OISST_url_get, skip.rows = 1:2)[[1]]$Name) %\u0026gt;% mutate(files = as.character(files)) %\u0026gt;% filter(grepl(\u0026quot;avhrr\u0026quot;, files)) %\u0026gt;% mutate(t = lubridate::as_date(sapply(strsplit(files, \u0026quot;[.]\u0026quot;), \u0026quot;[[\u0026quot;, 2)), full_name = paste0(OISST_url, files)) return(OISST_table) } # Here we collect the URLs for every day of data available from 2019 onwards OISST_filenames \u0026lt;- plyr::ldply(OISST_months$months, .fun = OISST_url_daily) # Just to keep things tidy in this vignette I am now going to limit this data collection even further OISST_filenames \u0026lt;- OISST_filenames %\u0026gt;% filter(t \u0026lt;= \u0026quot;2019-01-31\u0026quot;) # This function will go about downloading each day of data as a NetCDF file # We will run this via plyr to expedite the process # Note that this will download files into a \u0026#39;data/OISST\u0026#39; folder in the root directory # If this folder does not exist it will create it # This function will also check if the file has been previously downloaded OISST_url_daily_dl \u0026lt;- function(target_URL){ dir.create(\u0026quot;~/data/OISST\u0026quot;, showWarnings = F) file_name \u0026lt;- paste0(\u0026quot;~/data/OISST/\u0026quot;,sapply(strsplit(target_URL, split = \u0026quot;/\u0026quot;), \u0026quot;[[\u0026quot;, 10)) if(!file.exists(file_name)) download.file(url = target_URL, method = \u0026quot;libcurl\u0026quot;, destfile = file_name) } # The way this code has been written it may be run on multiple cores # Most modern laptops have at least 4 cores, so we will utilise 3 of them here # One should always leave at least 1 core free doParallel::registerDoParallel(cores = 3) # And with that we are clear for take off system.time(plyr::ldply(OISST_filenames$full_name, .fun = OISST_url_daily_dl, .parallel = T)) # ~15 seconds # In roughly 15 seconds a user may have a full month of global data downloaded # This scales well into years and decades, too Because it is not currently possible to download subsetted OISST data from a GRIDDAP server I find that it is useful to include here the code one would use to load and subset downloaded OISST data. Please note that the OISST data have longitude values from 0 to 360, not -180 to 180.\n# This function will load and subset daily data into one data.frame # Note that the subsetting of lon/lat is done before the data are loaded # This means it will use much less RAM and is viable for use on most laptops # Assuming one\u0026#39;s study area is not too large OISST_load \u0026lt;- function(file_name, lon1, lon2, lat1, lat2){ OISST_dat \u0026lt;- tidync(file_name) %\u0026gt;% hyper_filter(lon = between(lon, lon1, lon2), lat = between(lat, lat1, lat2)) %\u0026gt;% hyper_tibble() %\u0026gt;% select(lon, lat, time, sst) %\u0026gt;% dplyr::rename(t = time, temp = sst) %\u0026gt;% mutate(t = as.Date(t, origin = \u0026quot;1978-01-01\u0026quot;)) return(OISST_dat) } # Locate the files that will be loaded OISST_files \u0026lt;- dir(\u0026quot;~/data/OISST\u0026quot;, full.names = T) # Load the data in parallel OISST_dat \u0026lt;- plyr::ldply(.data = OISST_files, .fun = OISST_load, .parallel = T, lon1 = 260, lon2 = 280, lat1 = 30, lat2 = 50) # This should only take a few seconds to run at most  Downloading CCI An up-and-coming star in the world of remotely sensed data products, the Climate Change Initiative (CCI) has recently been putting out some industry leading products. These are all freely available for access and use for scientific research purposes. These have quickly become regarded as the most accurate products available and their use is now encouraged over other products. Unfortunately they are not available in near-real-time and so can currently only be used for historic analyses. A recent update of these data for 2017 and 2018 was made available and one assumes that 2019 will follow suit some time by the end of 2020.\n# The URLs where the data are housed for direct download # NB: Note that the versions are different; v2.1 vs. v2.0 # NB: It looks like going straight through the thredds server is a more stable option CCI_URL_old \u0026lt;- \u0026quot;http://dap.ceda.ac.uk/thredds/fileServer/neodc/esacci/sst/data/CDR_v2/Analysis/L4/v2.1\u0026quot; CCI_URL_new \u0026lt;- \u0026quot;http://dap.ceda.ac.uk/thredds/fileServer/neodc/c3s_sst/data/ICDR_v2/Analysis/L4/v2.0\u0026quot; # The date ranges that are housed therein # NB: These are historic repos and therefore the dates are static # I assume that the \u0026#39;new\u0026#39; data will be updated through 2019 by the end of 2020 date_range_old \u0026lt;- seq(as.Date(\u0026quot;1981-09-01\u0026quot;), as.Date(\u0026quot;2016-12-31\u0026quot;), by = \u0026quot;day\u0026quot;) date_range_new \u0026lt;- seq(as.Date(\u0026quot;2017-01-01\u0026quot;), as.Date(\u0026quot;2018-12-31\u0026quot;), by = \u0026quot;day\u0026quot;) # The function we will use to download the data download_CCI \u0026lt;- function(date_choice, CCI_URL){ # Prep the necessary URL pieces date_slash \u0026lt;- str_replace_all(date_choice, \u0026quot;-\u0026quot;, \u0026quot;/\u0026quot;) date_nogap \u0026lt;- str_replace_all(date_choice, \u0026quot;-\u0026quot;, \u0026quot;\u0026quot;) if(str_detect(CCI_URL, \u0026quot;esacci\u0026quot;)){ tail_chunk \u0026lt;- \u0026quot;120000-ESACCI-L4_GHRSST-SSTdepth-OSTIA-GLOB_CDR2.1-v02.0-fv01.0.nc\u0026quot; } else if(str_detect(CCI_URL, \u0026quot;c3s_sst\u0026quot;)){ tail_chunk \u0026lt;- \u0026quot;120000-C3S-L4_GHRSST-SSTdepth-OSTIA-GLOB_ICDR2.0-v02.0-fv01.0.nc\u0026quot; } else{ stop(\u0026quot;The URL structure has changed.\u0026quot;) } complete_URL \u0026lt;- paste0(CCI_URL,\u0026quot;/\u0026quot;,date_slash,\u0026quot;/\u0026quot;,date_nogap,tail_chunk) # Note that this will download the files to data/CCI in the root directory file_name \u0026lt;- paste0(\u0026quot;~/data/CCI/\u0026quot;,date_nogap,tail_chunk) # Download and save the file if needed if(file.exists(file_name)){ return() } else{ download.file(url = complete_URL, method = \u0026quot;libcurl\u0026quot;, destfile = file_name) } Sys.sleep(2) # Give the server a quick breather } # Run in parallel # Most laptops have 4 cores, so 3 is a good choice doParallel::registerDoParallel(cores = 3) # Download all old data: 1981-09-01 to 2016-12-31 # NB: Note the \u0026#39;[1:3]\u0026#39; below. This limits the downloads to only the first three files # Delete that to download everything. # But please do not download ALL of the files unless there is a need to do so. plyr::l_ply(date_range_old[1:3], .fun = download_CCI, CCI_URL = CCI_URL_old, .parallel = T) # Download all new data: 2016-01-01 to 2018-12-31 plyr::l_ply(date_range_new[1:3], .fun = download_CCI, CCI_URL = CCI_URL_new, .parallel = T)  Downloading OSTIA As noted above, CCI data products are quickly becoming the preferred standard. Unfortunately they are not available in near-real-time. This is where OSTIA data come in to fill the gap. Though not exactly the same assimilation process as CCI, these products come from the same suite of data sources. I do not yet know if these data for 2019 onwards can be used in combination with a climatology created from the CCI data, but it is on my to do list to find out. In order to download these data one will need to have a CMEMS account. This is free for researchers and very fast to sign up for. Once one has received a user name and password it is possible to use the code below to download the data via their FTP server. No Python required!\n# The URL where the data are housed for FTP OSTIA_URL \u0026lt;- \u0026quot;ftp://nrt.cmems-du.eu/Core/SST_GLO_SST_L4_NRT_OBSERVATIONS_010_001/METOFFICE-GLO-SST-L4-NRT-OBS-SST-V2\u0026quot; # The date ranges that are housed therein # NB: These are historic repos and therefore the dates are static # I assume that the \u0026#39;new\u0026#39; data will be updated through 2019 by the end of 2020 date_range \u0026lt;- seq(as.Date(\u0026quot;2019-01-01\u0026quot;), as.Date(\u0026quot;2019-01-03\u0026quot;), by = \u0026quot;day\u0026quot;) # Enter ones credentials here # Note that the \u0026#39;:\u0026#39; between \u0026#39;username\u0026#39; and \u0026#39;password\u0026#39; is required user_credentials \u0026lt;- \u0026quot;username:password\u0026quot; # Download function download_OSTIA \u0026lt;- function(date_choice, user_credentials){ # Prep the necessary URL pieces date_slash \u0026lt;- strtrim(str_replace_all(date_choice, \u0026quot;-\u0026quot;, \u0026quot;/\u0026quot;), width = 7) date_nogap_day \u0026lt;- str_replace_all(date_choice, \u0026quot;-\u0026quot;, \u0026quot;\u0026quot;) tail_chunk \u0026lt;- \u0026quot;120000-UKMO-L4_GHRSST-SSTfnd-OSTIA-GLOB-v02.0-fv02.0.nc\u0026quot; complete_URL \u0026lt;- paste0(OSTIA_URL,\u0026quot;/\u0026quot;,date_slash,\u0026quot;/\u0026quot;,date_nogap_day,tail_chunk) file_name \u0026lt;- paste0(\u0026quot;~/data/OSTIA/\u0026quot;,date_nogap_day,tail_chunk) # Download and save the file if needed if(file.exists(file_name)){ return() } else{ download_ftp_file(complete_URL, file_name, verbose = TRUE, credentials = user_credentials) } Sys.sleep(2) # Give the server a quick breather } # Run in parallel doParallel::registerDoParallel(cores = 3) # Download data from 2019-01-01 to present day # NB: Some files won\u0026#39;t download when run in parallel # I think the FTP server may be more aware of multiple requests than an HTTPS server # It may also have been due to high server use at the time, too plyr::l_ply(date_range, .fun = download_OSTIA, .parallel = T, user_credentials = user_credentials)  Downloading GLORYS At this point one may be thinking “wait a second, these have all been SST only products, this isn’t really a post about environmental data!”. But that’s where GLORYS comes in. This product has a range of variables one may be interested in. Not just SST. But yes, they are all physical variables. No bio-geochemistry in sight. Bamboozled! But if you’ve read this far, why stop now?! These data require a CMEMS account, same as the OSTIA data. They can also be downloaded via direct FTP access, but these files are enormous so in almost every use case this is not what one is intending to do. Rather these data are almost always subsetted in some way first. Luckily CMEMS has made this available to their user base with the introduction of the MOTU client. Unluckily they have only made this available for use in Python. I have asked the people behind this process in person if there are plans for an officially supported R version and the short and long answers were no. That’s where Mark Payne and his RCMEMS package enter the picture. He has wrapped the MOTU client for Python up in a handy R package that allows us to access, subset, and download CMEMS data all through the comfort of the RStudio interface! There is a tutorial on the GitHub repo that walks through the process that I show below if one would like an additional look at this process.\n# Non-R software # Unfortunately the subsetting of CMEMS data will require that one has Python installed # https://www.python.org/downloads/ # Then one must download # https://github.com/clstoulouse/motu-client-python/releases # For instructions on how and why to properly install please see: # https://github.com/markpayneatwork/RCMEMS # Here is a cunning method of generating a brick of year-month values date_range \u0026lt;- base::expand.grid(1993:2018, 1:12) %\u0026gt;% dplyr::rename(year = Var1, month = Var2) %\u0026gt;% arrange(year, month) %\u0026gt;% mutate(year_mon = paste0(year,\u0026quot;-\u0026quot;,month)) %\u0026gt;% dplyr::select(year_mon) # Download function # NB: This function is currently designed to subset data to a specific domain # Please change your lon/lat accordingly # NB: This function will save files to data/GLORYS in the root directory # To change this change the --out-dir argument near the end of the chunk of text # NB: This big text chunk needs to be left as one long line # NB: The --user and --pwd arguments need to be given the users real username and passwords # from their CMEMS account download_GLORYS \u0026lt;- function(date_choice){ # The GLORYS script # This is a dummy script first generated by using the UI on the CMEMS website # No need to change anything here except for the --user and --pwd at the end # Please place your CMEMS username and password in those fields GLORYS_script \u0026lt;- \u0026#39;python ~/motuclient-python/motuclient.py --motu http://my.cmems-du.eu/motu-web/Motu --service-id GLOBAL_REANALYSIS_PHY_001_030-TDS --product-id global-reanalysis-phy-001-030-daily --longitude-min -180 --longitude-max 179.9166717529297 --latitude-min -80 --latitude-max 90 --date-min \u0026quot;2018-12-25 12:00:00\u0026quot; --date-max \u0026quot;2018-12-25 12:00:00\u0026quot; --depth-min 0.493 --depth-max 0.4942 --variable thetao --variable bottomT --variable so --variable zos --variable uo --variable vo --variable mlotst --variable siconc --variable sithick --variable usi --variable vsi --out-dir data --out-name test.nc --user username --pwd password\u0026#39; # Prep the necessary URL pieces date_start \u0026lt;- parse_date(date_choice, format = \u0026quot;%Y-%m\u0026quot;) # A clever way of finding the end date of any month! # I found this on stackoverflow somewhere... date_end \u0026lt;- date_start %m+% months(1) - 1 # Cannot get data past 2018-12-25 if(date_end \u0026gt; as.Date(\u0026quot;2018-12-25\u0026quot;)) date_end \u0026lt;- as.Date(\u0026quot;2018-12-25\u0026quot;) # Set the file name file_name \u0026lt;- paste0(\u0026quot;GLORYS_\u0026quot;,date_choice,\u0026quot;.nc\u0026quot;) # Take the chunk of code above and turn it into something useful cfg \u0026lt;- parse.CMEMS.script(GLORYS_script, parse.user = T) # This is where one should make any required changes to the subsetting of the data # This is now the magic of the RCMEMS package, which allows us to interface with the Python code as though it were R cfg_update \u0026lt;- RCMEMS::update(cfg, variable = \u0026quot;thetao --variable bottomT --variable so --variable zos --variable uo --variable vo --variable mlotst --variable siconc --variable sithick --variable usi --variable vsi\u0026quot;, longitude.min = \u0026quot;-80.5\u0026quot;, longitude.max = \u0026quot;-40.5\u0026quot;, latitude.min = \u0026quot;31.5\u0026quot;, latitude.max = \u0026quot;63.5\u0026quot;, date.min = as.character(date_start), date.max = as.character(date_end), out.name = file_name) # Download and save the file if needed if(file.exists(paste0(\u0026quot;~/data/GLORYS/\u0026quot;,file_name))){ return() } else{ CMEMS.download(cfg_update) } Sys.sleep(2) # Give the server a quick breather } # I\u0026#39;ve limited the download to only 1 file # Delete \u0026#39;[1]\u0026#39; to download everything #NB: The CMEMS server is a little wonky, rather not try to multicore this plyr::l_ply(date_range$year_mon[1], .fun = download_GLORYS, .parallel = F)  Conclusion I hope this has been a useful whack of data for anyone looking to download any of these products for their science. The techniques laid out in the code here should apply to most other data products as well as there aren’t that many different methods of hosting data. If I’ve missed anything that people feel is an important data source that can’t be adapted from the code here let me know and I’m happy to see what I can do.\n ","date":1581638400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581638400,"objectID":"7fe8d8e771512de218fd566bff02afec","permalink":"https://theoceancode.netlify.com/post/dl_env_data_r/","publishdate":"2020-02-14T00:00:00Z","relpermalink":"/post/dl_env_data_r/","section":"post","summary":"Objective Having been working in environmental science for several years now, entirely using R, I’ve come to greatly appreciate environmental data sources that are easy to access. If you are reading this text now however, that probably means that you, like me, have found that this often is not the case. The struggle to get data is real. But it shouldn’t be. Most data hosting organisations do want scientists to use their data and do make it freely available.","tags":["environmental","data","download"],"title":"Downloading environmental data in R","type":"post"},{"authors":["RW Schlegel","ECJ Oliver","AJ Honday","AJ Smit"],"categories":null,"content":"","date":1576382400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576382400,"objectID":"8f8477b5796870138c2b80d6d7e60083","permalink":"https://theoceancode.netlify.com/publication/detection/","publishdate":"2019-12-15T00:00:00-04:00","relpermalink":"/publication/detection/","section":"publication","summary":"Marine heatwaves (MHWs), or prolonged periods of anomalously warm sea water temperature, have been increasing in duration and intensity globally for decades. However, there are many coastal, oceanic, polar, and sub-surface regions where our ability to detect MHWs is uncertain due to limited high quality data. Here, we investigate the effect that short time series length, missing data, or linear long-term temperature trends may have on the detection of MHWs. We show that MHWs detected in time series as short as 10 years did not have durations or intensities appreciably different from events detected in a standard 30 year long time series. We also show that the output of our MHW algorithm for time series missing less than 25% data did not differ appreciably from a complete time series, and that the level of allowable missing data could cautiously be increased to 50% when gaps were filled by linear interpolation. Finally, linear long-term trends of 0.10°C/decade or greater added to a time series caused larger changes (increases) to the count and duration of detected MHWs than shortening a time series to 10 years or missing more than 25% of the data. The long-term trend in a time series has the largest effect on the detection of MHWs and has the largest range in added uncertainty in the results. Time series length has less of an effect on MHW detection than missing data, but adds a larger range of uncertainty to the results. We provide suggestions for best practices to improve the accuracy of MHW detection with sub-optimal time series and show how the accuracy of these corrections may change regionally.","tags":["R","marine heatwaves"],"title":"Detecting Marine Heatwaves With Sub-Optimal Data","type":"publication"},{"authors":null,"categories":null,"content":"","date":1576382400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576382400,"objectID":"80683243cdd84ab14ace23e27d1ef78c","permalink":"https://theoceancode.netlify.com/package/heatwaver/","publishdate":"2019-12-15T00:00:00-04:00","relpermalink":"/package/heatwaver/","section":"package","summary":"An R package for the detection of heatwaves and cold-spells.","tags":["marine heatwaves","R"],"title":"heatwaveR","type":"package"},{"authors":null,"categories":null,"content":"","date":1576296000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576296000,"objectID":"c878226291a427aa835ed7f884c45ae7","permalink":"https://theoceancode.netlify.com/package/coastr/","publishdate":"2019-12-14T00:00:00-04:00","relpermalink":"/package/coastr/","section":"package","summary":"An R package with useful functions for coastal oceanography.","tags":["coastal","R"],"title":"coastR","type":"package"},{"authors":null,"categories":null,"content":"","date":1557111600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557111600,"objectID":"ab06caae2f4aaeec7310038b72ff7534","permalink":"https://theoceancode.netlify.com/poster/mhw_detection_poster/","publishdate":"2019-05-06T00:00:00-03:00","relpermalink":"/poster/mhw_detection_poster/","section":"poster","summary":"Research conducted on how sub-optimal a time series may be and still produce comparable marine heatwaves to an optimal time series.","tags":["marine heatwaves","R"],"title":"Detecting marine heatwaves with sub-optimal data","type":"poster"},{"authors":null,"categories":null,"content":"","date":1553482800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553482800,"objectID":"60f603ab4bf81263197ca2919c94d98e","permalink":"https://theoceancode.netlify.com/project/mhwtracker/","publishdate":"2019-03-25T00:00:00-03:00","relpermalink":"/project/mhwtracker/","section":"project","summary":"A daily updating web application for tracking the occurrence of marine heatwaves around the globe.","tags":["marine heatwaves"],"title":"Marine heatwave tracker","type":"project"},{"authors":null,"categories":null,"content":"","date":1552964400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552964400,"objectID":"723a6df0678636279dea984872dd1ec8","permalink":"https://theoceancode.netlify.com/talk/mhw_2019/","publishdate":"2019-03-19T00:00:00-03:00","relpermalink":"/talk/mhw_2019/","section":"talk","summary":"","tags":[],"title":"Marine heatwaves: the new normal","type":"talk"},{"authors":["RW Schlegel","AJ Smit"],"categories":null,"content":"","date":1535684400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535684400,"objectID":"65e60d72de4212cc6e6789900b2a3e87","permalink":"https://theoceancode.netlify.com/publication/heatwaver/","publishdate":"2018-08-31T00:00:00-03:00","relpermalink":"/publication/heatwaver/","section":"publication","summary":"","tags":["R","marine heatwaves"],"title":"heatwaveR: A central algorithm for the detection of heatwaves and cold-spells","type":"publication"},{"authors":null,"categories":["R"],"content":" Objective In South Africa there are a range of idioms for different time frames in which someone may (or may not) do something. The most common of these are: ‘now’, ‘just now’, and ‘now now’. If one were to Google these sayings one would find that there is general agreements on how long these time frames are, but that agreement is not absolute.\nAdvice from the internet.\n This got me to wondering just how much disagreement there may be around the country. And more specifically I wanted to know how these times changed between specific locations. If one is interested in contributing to the survey, it may be taken here. To avoid too much confusion with the answers that could be given, specific times were provided to the participants in a multiple choice format. These times (minutes) were: 5, 15, 30, 60, 120, 300.\n Data prep The survey data are downloaded from Google Forms rather easily as a .csv file, so that’s nice. Unfortunately, the way in which one sets up the survey for humans is difficult for R to understand so we need quite a bit of processing after we load the data.\nlibrary(tidyverse) library(ggpubr) library(broom) survey \u0026lt;- read_csv(\u0026quot;../../static/data/SA Time Survey.csv\u0026quot;, skip = 1, col_types = \u0026quot;cccccc\u0026quot;, col_names = c(\u0026quot;time\u0026quot;, \u0026quot;just now\u0026quot;, \u0026quot;now now\u0026quot;, \u0026quot;now\u0026quot;, \u0026quot;province\u0026quot;, \u0026quot;city\u0026quot;)) %\u0026gt;% select(-time) %\u0026gt;% mutate(`just now` = as.numeric(sapply(strsplit(`just now`, \u0026quot; \u0026quot;), \u0026quot;[[\u0026quot;, 1)), `now now` = as.numeric(sapply(strsplit(`now now`, \u0026quot; \u0026quot;), \u0026quot;[[\u0026quot;, 1)), `now` = as.numeric(sapply(strsplit(`now`, \u0026quot; \u0026quot;), \u0026quot;[[\u0026quot;, 1)), province = gsub(\u0026quot;Kzn\u0026quot;, \u0026quot;KZN\u0026quot;, province), province = gsub(\u0026quot;GP\u0026quot;, \u0026quot;Gauteng\u0026quot;, province), province = as.factor(province), city = as.factor(city)) # Check that city and province names are all lekker # levels(survey$province) # levels(survey$city) # Create a long version for easier stats survey_long \u0026lt;- survey %\u0026gt;% gather(key = \u0026quot;saying\u0026quot;, value = \u0026quot;minutes\u0026quot;, -province, -city) %\u0026gt;% na.omit()  Participant locations With our data prepared, I first wanted to see from where the surveys were taken. I’ve done this by splitting them up into province or city. This is also one of the few situations in which a bar plot is an appropriate visualisation. The columns below that show ‘NA’ are for participants that declined to share their location.\nprovince_plot \u0026lt;- ggplot(data = survey, aes(x = province)) + geom_bar(aes(fill = province), show.legend = F) + ggtitle(\u0026quot;Provinces of participants\u0026quot;) + labs(x = \u0026quot;\u0026quot;) # province_plot city_plot \u0026lt;- ggplot(data = survey, aes(x = city)) + geom_bar(aes(fill = city), show.legend = F) + ggtitle(\u0026quot;Cities of participants\u0026quot;) + labs(x = \u0026quot;\u0026quot;) + theme(axis.text.x = element_text(angle = 15)) # city_plot ggarrange(province_plot, city_plot, ncol = 1, nrow = 2)  Figure 1: Bar plots showing the total pariticpants by province or city.   Participant time frames With the locations of of our participants visualised we now want to see what sort of time frames people around the country attribute to the three most common idioms.\nggplot(data = survey_long, aes(x = saying, y = minutes, fill = saying)) + geom_boxplot(show.legend = FALSE, outlier.colour = NA) + geom_jitter(shape = 21, alpha = 0.6, width = 0.3, height = 0.0, show.legend = FALSE) + scale_y_continuous(breaks = c(5, 15, 30, 60, 120, 300)) + scale_fill_brewer(palette = \u0026quot;Accent\u0026quot;) + labs(x = \u0026quot;\u0026quot;)  Figure 2: Boxplots showing the distribution of times (minutes) survey participants gave for the three most common time frame idioms in South Africa.  As we may see in Figure 2, ‘just now’ and ‘now now’ appear to have similar distributions, whereas ‘now’ is markedly different. Participants answered the maximum score of 300 minutes for all idioms, but for ‘just now’ and ‘now now’ this was infrequent enough that the large scores are considered to be outliers. For ‘now’, enough participants answered with longer times that the distribution appears much larger than for the other two idioms. Even though these distributions appear different, let’s run the stats on them to make sure. Because we want to compare distributions of scores for three different categories we will be using an ANOVA if the data meet a few basic assumptions.\nJust as a quick recap, these assumptions are: homoscedasticity (homogeneity of variance), normality of distribution, random \u0026amp; independently sampled. It is also a good idea to have at least a sample size of ten for each category. Seeing as how this was an Internet survey, we were not able to ensure that the participants are a random representation of the South African populace, nor can we be certain that they submitted their answers independent of one another. I am however just going to go ahead and assume that they did. As for the assumptions of homoscedasticity and the normality of the distributions, we can directly test these. In R, the normality of a distribution is tested with shapiro.test(). Any non-significant result (p \u0026gt; 0.05) means that the data are normally distributed. To test for homoscedasticity we will use bartlett.test(). A non-significant result (p \u0026gt; 0.05) from this test indicates that the variances between the categories are equivalent.\n# test for normality survey_long %\u0026gt;% group_by(saying) %\u0026gt;% summarise(noramlity = as.numeric(shapiro.test(minutes)[1])) ## # A tibble: 3 x 2 ## saying noramlity ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 just now 0.565 ## 2 now 0.713 ## 3 now now 0.671 # Test for homoscedasticity survey_long %\u0026gt;% bartlett.test(minutes ~ saying, data = .) ## ## Bartlett test of homogeneity of variances ## ## data: minutes by saying ## Bartlett\u0026#39;s K-squared = 5.227, df = 2, p-value = 0.07328 Surprisingly these data meet all of our assumptions so we may perform a simple one-way ANOVA on them to detect any significant differences.\nglance(aov(minutes ~ saying, data = survey_long)) ## # A tibble: 1 x 11 ## r.squared adj.r.squared sigma statistic p.value df logLik AIC BIC ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 0.0615 0.0441 103. 3.54 0.0326 3 -670. 1349. 1360. ## # … with 2 more variables: deviance \u0026lt;dbl\u0026gt;, df.residual \u0026lt;int\u0026gt; Less surprisingly, there is a significant difference in the times given for these three idioms. But let’s dive just a bit deeper with a post-hoc Tukey (not Turkey) test to see which categories specifically are different from which.\nTukeyHSD(aov(minutes ~ saying, data = survey_long)) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = minutes ~ saying, data = survey_long) ## ## $saying ## diff lwr upr p adj ## now-just now 60.81081 3.949653 117.67197 0.0330869 ## now now-just now 14.18919 -42.671969 71.05035 0.8241544 ## now now-now -46.62162 -103.482779 10.23954 0.1302148 Looking at the names given in the ‘saying’ column, and the values given in the ‘p adj’ column we may see which individual idioms are different from which. Unsurprisingly, judging from Figure 2, ‘now now’ and ‘just now’ are not different. Interesting though is that ‘now’ is significantly different from ‘just now’, but not ‘now now’. The initial results made it look as though ‘now’ would have been significantly different from both.\n Province time frames Preferably, many more people would have taken the survey so that we could draw more conclusive results. I’m rather certain that should more people take the survey the distributions of the scores for the three idioms would even out more until there were no significant differences between any of them. Enough participants have taken the test however that we may compare the results for a few different provinces.\n# Remove provinces with fewer than nine entries # Ten would be preferable, but at nine we allow the inclusion of KZN survey_province \u0026lt;- survey_long %\u0026gt;% group_by(province) %\u0026gt;% filter(n() \u0026gt;= 9) %\u0026gt;% ungroup() And now with the provinces that have only a few answers filtered out, let’s see what the data look like as boxplots.\nggplot(data = survey_province, aes(x = saying, y = minutes, fill = province)) + geom_boxplot(outlier.colour = NA) + geom_point(shape = 21, position = position_jitterdodge()) + scale_y_continuous(breaks = c(5, 15, 30, 60, 120, 300)) + scale_fill_brewer(palette = \u0026quot;Set2\u0026quot;) + labs(x = \u0026quot;\u0026quot;)  Figure 3: Boxplots showing the distribution of times by province.  Right away for me it appears that the time frames for the Eastern Cape are shorter than for the other three provinces. KZN appears to be the longest, with Gauteng and the Western Cape seeming similar. Because we have multiple independent variables (saying and province) we want a two-way ANOVA. But before we do that, let’s again check for normality and homoscedasticity.\n# test for normality survey_province %\u0026gt;% group_by(saying, province) %\u0026gt;% summarise(normality = as.numeric(shapiro.test(minutes)[1])) ## # A tibble: 12 x 3 ## # Groups: saying [3] ## saying province normality ## \u0026lt;chr\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; ## 1 just now Eastern Cape 0.640 ## 2 just now Gauteng 0.867 ## 3 just now KZN 0.865 ## 4 just now Western Cape 0.537 ## 5 now Eastern Cape 0.766 ## 6 now Gauteng 0.721 ## 7 now KZN 0.75 ## 8 now Western Cape 0.729 ## 9 now now Eastern Cape 0.684 ## 10 now now Gauteng 0.689 ## 11 now now KZN 0.813 ## 12 now now Western Cape 0.718 # Test for homoscedasticity survey_province %\u0026gt;% bartlett.test(minutes ~ interaction(saying, province), data = .) ## ## Bartlett test of homogeneity of variances ## ## data: minutes by interaction(saying, province) ## Bartlett\u0026#39;s K-squared = 69.523, df = 11, p-value = 1.505e-10 The different groups of time are all normally distributed, but the variances differ. Regardless, we are going to stick to a normal two-way ANOVA as there are no good alternatives to this for non-parametric data and transforming these data is a bother.\nglance(aov(minutes ~ saying + province, data = survey_province)) ## # A tibble: 1 x 11 ## r.squared adj.r.squared sigma statistic p.value df logLik AIC BIC ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 0.204 0.163 94.4 5.06 3.58e-4 6 -623. 1261. 1279. ## # … with 2 more variables: deviance \u0026lt;dbl\u0026gt;, df.residual \u0026lt;int\u0026gt; Significant differences are to be had here. So let’s break it down and see which groups specifically differ.\nTukeyHSD(aov(minutes ~ saying + province, data = survey_province)) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = minutes ~ saying + province, data = survey_province) ## ## $saying ## diff lwr upr p adj ## now-just now 70.14286 16.46427 123.821448 0.0068600 ## now now-just now 15.42857 -38.25002 69.107162 0.7734013 ## now now-now -54.71429 -108.39288 -1.035695 0.0447008 ## ## $province ## diff lwr upr p adj ## Gauteng-Eastern Cape 63.452381 -15.761193 142.66595 0.1624466 ## KZN-Eastern Cape 139.722222 39.043527 240.40092 0.0025348 ## Western Cape-Eastern Cape 73.289474 6.613379 139.96557 0.0252743 ## KZN-Gauteng 76.269841 -21.982505 174.52219 0.1845631 ## Western Cape-Gauteng 9.837093 -53.115472 72.78966 0.9768852 ## Western Cape-KZN -66.432749 -154.888584 22.02309 0.2092492 We may see that by removing some of the answers from the less represented provinces there is now a significant difference between the scores for ‘now’ and ‘now now’ as well as ‘just now’. Additionally we may see that the scores for Eastern Cape differ significantly from KZN and the Western Cape. One could also look at the interactions between the two independent variables but I’m not quite interested in that level of depth here.\n City time frames With the breakdown for the province time frames out of the way, we are going to wrap up this analysis by looking at the difference between cities.\n# Remove provinces with fewer than five entries # Ten is preferable, but at five we may include Mthatha survey_city \u0026lt;- survey_long %\u0026gt;% group_by(saying, city) %\u0026gt;% filter(n() \u0026gt;= 5) %\u0026gt;% ungroup() ggplot(data = survey_city, aes(x = saying, y = minutes, fill = city)) + geom_boxplot(outlier.colour = NA) + geom_point(shape = 21, position = position_jitterdodge()) + scale_y_continuous(breaks = c(5, 15, 30, 60, 120, 300)) + scale_fill_brewer(palette = \u0026quot;Set3\u0026quot;) + labs(x = \u0026quot;\u0026quot;)  Figure 4: Boxplots showing the distribution of times by city.  Again with the assumptions…\n# test for normality survey_city %\u0026gt;% group_by(saying, city) %\u0026gt;% summarise(normality = as.numeric(shapiro.test(minutes)[1])) ## # A tibble: 9 x 3 ## # Groups: saying [3] ## saying city normality ## \u0026lt;chr\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; ## 1 just now Cape Town 0.577 ## 2 just now Johannesburg 0.912 ## 3 just now Mthatha 0.552 ## 4 now Cape Town 0.739 ## 5 now Johannesburg 0.757 ## 6 now Mthatha 0.754 ## 7 now now Cape Town 0.739 ## 8 now now Johannesburg 0.741 ## 9 now now Mthatha 0.552 # Test for homoscedasticity survey_city %\u0026gt;% bartlett.test(minutes ~ interaction(saying, city), data = .) ## ## Bartlett test of homogeneity of variances ## ## data: minutes by interaction(saying, city) ## Bartlett\u0026#39;s K-squared = 55.177, df = 8, p-value = 4.078e-09 … and again we see that while normally distributed, the variance of our sample sets differ significantly from one another. Regardless, we’ll stick to the two-way ANOVA.\nglance(aov(minutes ~ saying + city, data = survey_city)) ## # A tibble: 1 x 11 ## r.squared adj.r.squared sigma statistic p.value df logLik AIC BIC ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 0.205 0.164 94.2 4.91 0.00141 5 -481. 973. 987. ## # … with 2 more variables: deviance \u0026lt;dbl\u0026gt;, df.residual \u0026lt;int\u0026gt; As one likely would have deduced from Figure 4, the scores are significantly different from one another.\nTukeyHSD(aov(minutes ~ saying + city, data = survey_city)) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = minutes ~ saying + city, data = survey_city) ## ## $saying ## diff lwr upr p adj ## now-just now 77.96296 16.65151 139.2744119 0.0090081 ## now now-just now 16.85185 -44.45960 78.1633008 0.7889537 ## now now-now -61.11111 -122.42256 0.2003379 0.0509401 ## ## $city ## diff lwr upr p adj ## Johannesburg-Cape Town -10.72917 -72.99124 51.532904 0.9108240 ## Mthatha-Cape Town -84.89583 -151.53238 -18.259285 0.0088590 ## Mthatha-Johannesburg -74.16667 -152.92265 4.589316 0.0691761 From the post-hoc test we may see that ‘now’ differs significantly from ‘just now in these three cities, and if we’re feeling generous we may say that ’now’ also differs significantly from ‘now now’. But like with the rest of the country, ‘now now’ and ‘just now’ are not significantly different time frames. Looking at the city breakdown we see that the only significant difference is between Mthatha and Cape Town. Johannesburg and Cape Town do not differ.\n Conclusion The general conclusion I’ve drawn from the analysis of the South Africa time survey results is that the understanding people in the Eastern Cape have of the time frames for these idioms is significantly faster than in the other major provinces in South Africa. The numbers don’t lie!\nSpeaking to people about this survey (before the results were out), the general consensus was that Johannesburg people would give significantly faster scores than people in other parts of the country, particularly Cape Town. That does not however appear to be the case. Also surprising from these results was that ‘now’ tended to be considered to be a significantly longer time frame than ‘just now’ and ‘now now’. Most people I’ve talked to about these idioms agree that ‘now’ is meant to be the fastest… so I’m not sure how that worked out. Unsurprising to me, but perhaps to some South Africans, was that there is no difference between ‘just now’ and ‘now now’. I was not surprised by this because talking with people around the country I very infrequently heard people, even while in the same room, agree on the time frames for these idioms.\nThere are of course a host of issues with this study. One thing I’m wondering about the Eastern Cape scores being significantly faster than the other provinces is if perhaps people in the Eastern Cape have a wider range of idioms for giving someone a time frame? Meaning, perhaps ‘now’, ‘just now’, and ‘now now’ are all much faster than other provinces because there is some other popular idiom people use there that denotes a longer time frame. It’s also possible that people in other provinces misunderstood the survey. Though I did make it very clear that the answers were in minutes and not seconds, specifically to attempt to prevent people from making that mistake. Lastly, this analysis suffers from a regrettably small sample size. I would have preferred at least 100 responses, rather than 40. It is still wonderful to be able to get some numbers in the game and get a glimpse of the fact that there is little agreement about these time frames.\nHopefully posting these results will snare a few more people into taking the survey and in another couple of months I can make a follow up post with the additional feedback.\n ","date":1531785600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531785600,"objectID":"9895c22de5fcffe2104248b51d41588c","permalink":"https://theoceancode.netlify.com/post/sa_time_survey/","publishdate":"2018-07-17T00:00:00Z","relpermalink":"/post/sa_time_survey/","section":"post","summary":"Objective In South Africa there are a range of idioms for different time frames in which someone may (or may not) do something. The most common of these are: ‘now’, ‘just now’, and ‘now now’. If one were to Google these sayings one would find that there is general agreements on how long these time frames are, but that agreement is not absolute.\nAdvice from the internet.\n This got me to wondering just how much disagreement there may be around the country.","tags":["survey","statistics"],"title":"South Africa time survey","type":"post"},{"authors":null,"categories":null,"content":"\u0026hellip;\n","date":1530154800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530154800,"objectID":"18d05a63a1c8d7ed973cc51838494e41","permalink":"https://theoceancode.netlify.com/privacy/","publishdate":"2018-06-28T00:00:00-03:00","relpermalink":"/privacy/","section":"","summary":"\u0026hellip;","tags":null,"title":"Privacy Policy","type":"page"},{"authors":null,"categories":["R"],"content":" Preface This week I have expanded the coastR package with the inclusion of a function that calculates the angle of the heading for alongshore or shore-normal transects. The rest of this blog post is the vignette that I’ve written detailing the set of this function. Next week I’ll likely be taking a break from coastR development to finally create a package for the SACTN dataset. That is a project that has been in the works for a loooong time and it will be good to finally see a development release available to the public.\n Overview There are a number of reasons why one would want to calculate transects along or away from a coastline. Examples include: finding the fetch across an embayment, finding the coordinates of a point 200 km from the coast, finding the appropriate series of SST pixels along/away from the coast, (or if one is feeling particular feisty) the creation of shape files for a given area away from the coast. The function that we will be introducing here does none of these things. What the transects() function does do is calculate the angle of the heading along or away from the coast against true North, which is then the basis for all of the other fancy things one may want to do. Baby steps people. Baby steps.\n# devtools::install_github(\u0026quot;robwschlegel/coastR\u0026quot;) # Install coastR library(coastR) library(dplyr) library(ggplot2) library(gridExtra) library(geosphere)  Sample locations For this vignette we will re-use the same coastlines as those created for the sequential sites vignette. The ordering of the sites remains jumbled up to demonstrate that transects() does not require orderly data. Should one want to order ones site list before calculating transect headings it is possible to do so with seq_sites(). This is of course a recommended step in any workflow.\n# Cape Point, South Africa cape_point \u0026lt;- SACTN_site_list %\u0026gt;% slice(c(31, 22, 26, 17, 19, 21, 30)) %\u0026gt;% mutate(order = 1:n()) # South Africa south_africa \u0026lt;- SACTN_site_list %\u0026gt;% slice(c(1,34, 10, 20, 50, 130, 90)) %\u0026gt;% mutate(order = 1:n()) # Baja Peninsula, Mexico baja_pen \u0026lt;- data.frame( order = 1:7, lon = c(-116.4435, -114.6800, -109.6574, -111.9503, -112.2537, -113.7918, -114.1881), lat = c(30.9639, 30.7431, 22.9685, 26.9003, 25.0391, 29.4619, 28.0929) ) # Bohai Sea, China bohai_sea \u0026lt;- data.frame( order = 1:7, lon = c(122.0963, 121.2723, 121.0687, 121.8742, 120.2962, 117.6650, 122.6380), lat = c(39.0807, 39.0086, 37.7842, 40.7793, 40.0691, 38.4572, 37.4494) )  Transects With our site lists created we now want to see what the correct headings for alongshore and shore-normal transects are for our sites. We will also demonstrate what happens when we increase the spread used in the calculation and also how the inclusion of island masks affects the angle of the headings.\n# Cape Point, South Africa cape_point_along \u0026lt;- transects(cape_point, alongshore = T) cape_point_away \u0026lt;- transects(cape_point) # South Africa south_africa_along \u0026lt;- transects(south_africa, alongshore = T) south_africa_away \u0026lt;- transects(south_africa) # NB: Note here the use of the `spread` argument south_africa_along_wide \u0026lt;- transects(south_africa, alongshore = T, spread = 30) south_africa_away_wide \u0026lt;- transects(south_africa, spread = 30) # Baja Peninsula, Mexico baja_pen_along \u0026lt;- transects(baja_pen, alongshore = T) baja_pen_away \u0026lt;- transects(baja_pen) # NB: Note here the use of the `coast` argument baja_pen_island \u0026lt;- transects(baja_pen, coast = FALSE) # Bohai sea, China bohai_sea_along \u0026lt;- transects(bohai_sea, alongshore = T) bohai_sea_away \u0026lt;- transects(bohai_sea)  Visualise Now that the correct headings have been calculated for our alongshore and shore-normal transects let’s visualise them with ggplot. First we will create a function that does this in order to keep the length of this vignette down.\n# Create base map world_map \u0026lt;- ggplot() + borders(fill = \u0026quot;grey40\u0026quot;, colour = \u0026quot;black\u0026quot;) # Create titles titles \u0026lt;- c(\u0026quot;Alongshore\u0026quot;, \u0026quot;Shore-normal\u0026quot;, \u0026quot;Islands\u0026quot;) # Plotting function plot_sites \u0026lt;- function(site_list, buffer, title_choice, dist){ # Find the point 200 km from the site manually to pass to ggplot heading2 \u0026lt;- data.frame(geosphere::destPoint(p = select(site_list, lon, lat), b = site_list$heading, d = dist)) # Add the new coordinates tot he site list site_list \u0026lt;- site_list %\u0026gt;% mutate(lon_dest = heading2$lon, lat_dest = heading2$lat) # Visualise world_map + geom_segment(data = site_list, colour = \u0026quot;red4\u0026quot;, aes(x = lon, y = lat, xend = lon_dest, yend = lat_dest)) + geom_point(data = site_list, size = 3, colour = \u0026quot;black\u0026quot;, aes(x = lon, y = lat)) + geom_point(data = site_list, size = 3, colour = \u0026quot;red\u0026quot;, aes(x = lon_dest, y = lat_dest)) + coord_cartesian(xlim = c(min(site_list$lon - buffer), max(site_list$lon + buffer)), ylim = c(min(site_list$lat - buffer), max(site_list$lat + buffer))) + labs(x = \u0026quot;\u0026quot;, y = \u0026quot;\u0026quot;, colour = \u0026quot;Site\\norder\u0026quot;) + ggtitle(titles[title_choice]) } Cape Point, South Africa The transect() function is designed to work well at small scales by default. We may see this here with the effortlessness of plotting transects around a peninsula and then across an embayment in one go.\ncape_point_along_map \u0026lt;- plot_sites(cape_point_along, 0.5, 1, 10000) cape_point_away_map \u0026lt;- plot_sites(cape_point_away, 0.5, 2, 10000) grid.arrange(cape_point_along_map, cape_point_away_map, nrow = 1) (#fig:cape_point_trans)Alongshore and shore-normal transects around Cape Point and False Bay, South Africa.   South Africa The intentions one may have for calculating shore-normal transects will differ depending on ones research question. If one is interested in visualising the convolutions of a coastline at a sub-meso-scale then the default spread of the transect() function is probably the way to go, as shown above. If however one is interested in seeing the shore-normal transects broadly for the coastline of an entire country it is likely that one will want to greatly expand the spread of coastline used to calculate said transects. In the figure below we may see how changing the spread of the coastline considered for the transects changes the results. The top row shows the transects resulting from the narrow default spread, while the bottom row shows the results of using a much wider spread for the calculation. Note particularly how the transect changes at St. Helena Bay and Gansbaai (second and fourth sites from the top left), as well as a general smoothing of all of the other transects. This is due to the sensitivity of the function. The St. Helena Bay and Gansbaai sites lay within embayments; therefore, the shore-normal transects that would come out directly from these sites will not follow the general contour of the coastline of South Africa. Should we be interested in the “bigger picture” we must increase the spread argument in transects(). This may require some trial and error for particularly difficult coastlines before a satisfactory result is produced, but it is certainly still faster than running the calculations by hand. Should small scale accuracy along part of the coast, and broader accuracy elsewhere be required, one must simply divide the site list into the different sections and run transects() on each subset with the desired spread.\nsouth_africa_along_map \u0026lt;- plot_sites(south_africa_along, 1, 1, 100000) south_africa_away_map \u0026lt;- plot_sites(south_africa_away, 1, 2, 100000) south_africa_along_wide_map \u0026lt;- plot_sites(south_africa_along_wide, 1, 1, 100000) south_africa_away_wide_map \u0026lt;- plot_sites(south_africa_away_wide, 1, 2, 100000) grid.arrange(south_africa_along_map, south_africa_away_map, south_africa_along_wide_map, south_africa_away_wide_map, nrow = 2) (#fig:south_africa_trans)Alongshore and shore-normal transects around all of South Africa.   Baja Peninsula, Mexico In the following figure we see how the inclusion of islands affects the results of our transects. The first site up from the tip of the peninsula on the left-hand side is on an island. Note the minor adjustment to the transect when the island mask is used for the calculation. In this case it’s not large, but in other instances it may be massive. By default island masks are removed and it is our advice that they not be used unless extreme caution is observed.\nbaja_pen_along_map \u0026lt;- plot_sites(baja_pen_along, 1, 1, 100000) baja_pen_away_map \u0026lt;- plot_sites(baja_pen_away, 1, 2, 100000) baja_pen_island_map \u0026lt;- plot_sites(baja_pen_island, 1, 3, 100000) grid.arrange(baja_pen_along_map, baja_pen_away_map, baja_pen_island_map, nrow = 1) (#fig:baja_pen_trans)Alongshore and shore-normal transects around the Baja Peninsula.   Bohai Sea, China This figure serves as a good visualisation for just how localised the coastline is that is used to calculate the shore-normal transects. Note how the alongshore transects look a little dodgy, but when shown as shore-normal transects everything works out. This is something to consider if one is interested in calculating alongshore transects rather than shore-normal transects. For alongshore transects that show more fidelity for coastal direction it is advisable to increase the spread argument.\nbohai_sea_along_map \u0026lt;- plot_sites(bohai_sea_along, 1, 1, 70000) bohai_sea_away_map \u0026lt;- plot_sites(bohai_sea_away, 1, 2, 70000) grid.arrange(bohai_sea_along_map, bohai_sea_away_map, nrow = 1) (#fig:bohai_sea_trans)Alongshore and shore-normal transects within the Bohai Sea.    Conclusion As we may see in the previous example figures, the transect() function tends to work better by default at smaller scales. This was an intentional decision as it is much more accurate when scaling the function up for larger coastal features than when scaling it down for smaller ones.\nThe calculation of the heading for alongshore and shore-normal transects is rarely the end goal itself. One then generally wants to find specific points from the coastline along the transects that have been determined. This is done in the code above within the plot_sites() function created within this vignette, but the process is not detailed specifically. How to do more elaborate things with transects will be explained with the following functions to be added to coastR. This will include how to draw coastal polygons based on distance and bathymetry.\n ","date":1512691200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1512691200,"objectID":"f80b12d0d87542bd28d8ec97b6928e5b","permalink":"https://theoceancode.netlify.com/post/transects/","publishdate":"2017-12-08T00:00:00Z","relpermalink":"/post/transects/","section":"post","summary":"Preface This week I have expanded the coastR package with the inclusion of a function that calculates the angle of the heading for alongshore or shore-normal transects. The rest of this blog post is the vignette that I’ve written detailing the set of this function. Next week I’ll likely be taking a break from coastR development to finally create a package for the SACTN dataset. That is a project that has been in the works for a loooong time and it will be good to finally see a development release available to the public.","tags":["coastal"],"title":"Transects","type":"post"},{"authors":["RW Schlegel","ECJ Oliver","S Perkins-Kirkpatrick","A Kruger","AJ Smit"],"categories":null,"content":"","date":1508209200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1508209200,"objectID":"0b102118b91144a4196a666ef4f2aefc","permalink":"https://theoceancode.netlify.com/publication/predominant/","publishdate":"2017-10-17T00:00:00-03:00","relpermalink":"/publication/predominant/","section":"publication","summary":"As the mean temperatures of the worlds oceans increase, it is predicted that marine heatwaves (MHWs) will occur more frequently and with increased severity. However, it has been shown that variables other than increases in sea water temperature have been responsible for MHWs. To better understand these mechanisms driving MHWs we have utilized atmospheric (ERA-Interim) and oceanic (OISST, AVISO) data to examine the patterns around southern Africa during coastal (","tags":["R","coastal","atmosphere","ocean"],"title":"Predominant Atmospheric and Oceanic Patterns during Coastal Marine Heatwaves","type":"publication"},{"authors":null,"categories":["R"],"content":" Objective Whilst cruising about on Imgur I found a post about science stuff. Not uncommon, which is nice. These sorts of grab-bag posts about nothing in particular often include some mention of climate science, almost exclusively some sort of clever visualisation of a warming planet. That seems to be what people are most interested in. I’m not complaining though, it keeps me employed. The aforementioned post caught my attention more than usual because it included a GIF, and not just a static picture of some sort of blue thing that is becoming alarmingly red (that was not meant to be a political metaphor). I’m referring to the now famous GIF by climate scientist Ed Hawkins (@ed_hawkins) whose blog may be found here, and the specific post in question here. A quick bit of research on this animation revealed that it has likely been viewed by millions of people, was featured in the opening ceremony of the Rio Olympics, and was created in MATLAB. Those three key points made me decide to do a post on how to re-create this exact figure in R via a bit of reverse engineering. The original GIF in question is below.\nFigure 1: The ever broadening spiral of global temperatures created by Ed Hawkins.\n Data Figure 1 above uses the global mean temperature anomalies taken from HadCRUT4. These data have an impressive range of collection, going back to 1850. Very few datasets match this length of collection, and I’m not going to attempt to do so here. What I am going to do is use the data that I work with on a daily basis. These are the SACTN data that may also be downloaded here via a GUI. As a coastal oceanographer I am mostly interested in changing climates in the near shore. While not publish explicitly, a paper about the appropriate methodology one should use does exist, and this methodology has been applied to all of the time series in the SACTN dataset accordingly. It is therefore known what the rates of decadal change along the coast of South Africa are, and we may rely on this in order to cherry pick the more dramatic time series in order to make prettier visuals.\n Code With our end goal established (Figure 1), and our dataset chosen (SACTN), we may now get busy with the actual code necessary. As one may have inferred from the title of this post, Figure 1 is what we call a “polar plot”. This may appear complex to some, but is actually a very simple visualisation, as we shall see below. But first we need to prep our data. For consistency in the creation of the anomaly values below I will use 1981 – 2010 for the climatology of each time series.\n## Libraries library(tidyverse) library(viridis) library(lubridate) library(zoo) library(gridExtra) library(animation) ## Data # SACTN load(\u0026quot;../../static/data/SACTN_monthly_v4.2.RData\u0026quot;) ## Subset # Subseting function ts.sub \u0026lt;- function(site){ ts \u0026lt;- SACTN_monthly_v4.2 %\u0026gt;% filter(index == site) %\u0026gt;% mutate(year = year(as.yearmon(date)), month = month(as.yearmon(date), label = T), clim = mean(temp[year %in% seq(1981,2010)], na.rm = T), anom = temp-clim, index = as.character(index)) %\u0026gt;% rename(site = index) %\u0026gt;% select(site, year, month, anom) return(ts) } # Warming site PN \u0026lt;- ts.sub(\u0026quot;Port Nolloth/SAWS\u0026quot;) # Cooling site SP \u0026lt;- ts.sub(\u0026quot;Sea Point/SAWS\u0026quot;) # Neutral site KB \u0026lt;- ts.sub(\u0026quot;Kent Bay/KZNSB\u0026quot;) With our data prepared we may now create the series of functions that will make a spiralling polar plot of temperatures for any time series we feed into it. I prefer to use the animation package to create animations in R. This requires that one also installs image magick beforehand. This is a free software that is available for all major operating systems. There are a few ways to create animations in R, but I won’t go into that now. The method I employ to create the animations below may seem odd at first, but as far as I have seen it is the most efficient way to do so. The philosophy employed here is that we want to have one final function that simply counts forward one step at a time, creating each frame of the GIF. This function calls on other functions that are calculating the necessary stats and creating the visuals from them in the background. By creating animations in this way, our up front prep and calculation time is almost non-existent. It does mean that the animations take longer to compile, but they are also much more dynamic and we may feed any number of different dataframes into them to get different outputs. I have found over the years that the more automated ones code can be the better.\n## Function that creates a polar plot polar.plot \u0026lt;- function(df, i){ # Add bridges for polar coordinates years \u0026lt;- unique(df$year)[1:i] df2 \u0026lt;- filter(df, year %in% years) bridges \u0026lt;- df2[df2$month == \u0026#39;Jan\u0026#39;,] bridges$year \u0026lt;- bridges$year - 1 if(nrow(bridges) == 0){ bridges \u0026lt;- data.frame(site = df2$site[1], year = min(df2$year), month = NA, anom = NA) } else { bridges$month \u0026lt;- NA } blanks \u0026lt;- data.frame(site = df2$site[1], expand.grid(year = min(df2$year)-1, month = month.abb), anom = NA) # Polar plot pp \u0026lt;- ggplot(data = rbind(blanks, df2, bridges), aes(x = month, y = anom, group = year)) + # Circular black background geom_rect(colour = \u0026quot;black\u0026quot;, fill = \u0026quot;black\u0026quot;, aes(xmin = \u0026quot;Jan\u0026quot;, xmax = NA, ymin = min(df$anom, na.rm = T), ymax = max(df$anom, na.rm = T))) + # ymin = min(df$anom, na.rm = T), ymax = 3)) + # Anomaly threshold labels geom_hline(aes(yintercept = 1.0), colour = \u0026quot;red\u0026quot;) + geom_label(aes(x = \u0026quot;Jan\u0026quot;, y = 1.0, label = \u0026quot;1.0°C\u0026quot;), colour = \u0026quot;red\u0026quot;, fill = \u0026quot;black\u0026quot;, size = 3) + geom_hline(aes(yintercept = 2.0), colour = \u0026quot;red\u0026quot;) + geom_label(aes(x = \u0026quot;Jan\u0026quot;, y = 2.0, label = \u0026quot;2.0°C\u0026quot;), colour = \u0026quot;red\u0026quot;, fill = \u0026quot;black\u0026quot;, size = 3) + geom_hline(aes(yintercept = 3.0), colour = \u0026quot;red\u0026quot;) + geom_label(aes(x = \u0026quot;Jan\u0026quot;, y = 3.0, label = \u0026quot;3.0°C\u0026quot;), colour = \u0026quot;red\u0026quot;, fill = \u0026quot;black\u0026quot;, size = 3) + geom_hline(aes(yintercept = 4.0), colour = \u0026quot;red\u0026quot;) + geom_label(aes(x = \u0026quot;Jan\u0026quot;, y = 4.0, label = \u0026quot;4.0°C\u0026quot;), colour = \u0026quot;red\u0026quot;, fill = \u0026quot;black\u0026quot;, size = 3) + # Temperature spiral geom_path(aes(colour = anom), show.legend = F) + # Scale corrections scale_colour_viridis(limits = c(min(df$anom, na.rm = T), max(df$anom, na.rm = T))) + scale_x_discrete(expand = c(0,0), breaks = month.abb) + scale_y_continuous(expand = c(0,0), limits = c(min(df$anom, na.rm = T), max(df$anom, na.rm = T))) + # Year label geom_text(aes(x = \u0026quot;Jan\u0026quot;, y = min(df$anom, na.rm = T), label = max(df2$year, na.rm = T)), colour = \u0026quot;ivory\u0026quot;, size = 8) + # Additional tweaks ggtitle(paste0(df$site[1],\u0026quot; temperature change (\u0026quot;,min(df$year),\u0026quot;-\u0026quot;,max(df$year),\u0026quot;)\u0026quot;)) + coord_polar() + theme(panel.background = element_rect(fill = \u0026quot;grey20\u0026quot;), plot.background = element_rect(fill = \u0026quot;grey20\u0026quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), # axis.text.x = element_text(colour = \u0026quot;ivory\u0026quot;), axis.text.x = element_text(colour = \u0026quot;ivory\u0026quot;, angle = (360/(2*pi)*rev(seq(pi/12, 2*pi-pi/12, len = 12)))+15, size = 12), axis.text.y = element_blank(), axis.title = element_blank(), axis.ticks = element_blank(), axis.ticks.length = unit(0, \u0026quot;cm\u0026quot;), plot.title = element_text(hjust = 0.5, colour = \u0026quot;ivory\u0026quot;, size = 15)) print(pp) } ## Create animation of polar plots animate.polar.plot \u0026lt;- function(df) { lapply(seq(1,length(unique(df$year))), function(i) { polar.plot(df = df, i = i) }) } With the above two functions created, we may now call them nested within one another via the saveGIF function below.\n# By default \u0026#39;saveGIF()\u0026#39; outputs to the same folder # the script where the code is being run from is located. # For that reason one may want to manually change the # working directory beforehand. # setwd(\u0026quot;somewhere else\u0026quot;) system.time(saveGIF(animate.polar.plot(df = PN), interval = 0.4, ani.width = 457, movie.name = \u0026quot;polar_plot_PN.gif\u0026quot;)) ## 262 seconds system.time(saveGIF(animate.polar.plot(df = SP), interval = 0.4, ani.width = 457, movie.name = \u0026quot;polar_plot_SP.gif\u0026quot;)) ## 221 seconds system.time(saveGIF(animate.polar.plot(df = KB), interval = 0.4, ani.width = 457, movie.name = \u0026quot;polar_plot_KB.gif\u0026quot;)) ## 183 seconds # setwd(\u0026quot;back to where you were\u0026quot;)  Summary As one may see in the following GIFs, local extremes often outpace global averages. This should not be terribly surprising. In order to better illustrate this I have expanded the anomaly labels along the y-axes more so than seen in Figure 1. The increasing patterns are not as clear in these following GIFs as in the original that they are based on. This is because the original is based on a global average, which provides for a much smoother trend. I hope people enjoy these and feel free to plop your own temperature time series into the code to create your own polar plot figures!\nFigure 2: The polar plot for Port Nolloth, where temperatures have been increasing.\nFigure 3: The polar plot for Sea Point, where temperatures have been decreasing.\nFigure 4: The polar plot for Kent Bay, where temperatures have been holding level.\n ","date":1503446400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1503446400,"objectID":"7f91875a8a66eef2ded76bfb309f6f87","permalink":"https://theoceancode.netlify.com/post/polar_plot_clims/","publishdate":"2017-08-23T00:00:00Z","relpermalink":"/post/polar_plot_clims/","section":"post","summary":"Objective Whilst cruising about on Imgur I found a post about science stuff. Not uncommon, which is nice. These sorts of grab-bag posts about nothing in particular often include some mention of climate science, almost exclusively some sort of clever visualisation of a warming planet. That seems to be what people are most interested in. I’m not complaining though, it keeps me employed. The aforementioned post caught my attention more than usual because it included a GIF, and not just a static picture of some sort of blue thing that is becoming alarmingly red (that was not meant to be a political metaphor).","tags":["visuals","climatology"],"title":"Polar plot climatologies","type":"post"},{"authors":null,"categories":["R"],"content":" Preface The rest of the blog post after this preface section is a copy of the vignette I’ve written for the first function in the new package I am developing: coastR. This package aims to provide functions that are useful for coastal oceanography but that do not yet exist in the R language. It is not my intention to provide algorithms for physical oceanography as these may already be found elsewhere. This post covers how one may determine the correct sequence of sites along a convoluted coastline.\nNow that I’ve handed in my PhD I am a little less pressed as far as deadlines go and I would like to return to my habit of creating a new blog post every Friday. I’ve written quite a bit of code over the last three years and much of it needs to find it’s way into the coastR. Next week I am planning on uploading a function for calculating shore normal transects. Until then, please enjoy the spectacle of sequential ordering. Woo.\n Overview The human mind prefers to see patterns in whatever it encounters. To this end we try to provide ourselves with data that are stored in a way that will appeal to that disposition. For a time series this usually means that the data are saved sequentially through time. For spatial data this means that the data are saved in some sort of sequential state, too. But what might that be? For 2D, 3D, or 4D data this can get tricky rather quickly and one tends to default to netcdf files. But with 1D data we are able to decide how we want the data to be structured as they will fit within a simple dataframe. But how can spatial data be 1D? Nothing in nature truly is, but I use 1D here as an expedient way of describing data that are constrained to some physical (usually continuous) barrier. Specifically for use with seq_sites() we will be looking at sites along a coastline.\nIf one has meta-data for a number of sampling sites they should be saved in the order they may be found along the coastline. Some would perhaps prefer to order sites alphabetically, I am not one of them for a number of reasons. Not least of which being that this is too simple a way of organising. One could also choose to organise ones coastal sites in numerical order of either longitude or latitude. This quickly becomes problematic for most stretches of coastline as natural formations such as peninsulas and embayments will prevent the correct ordering of sites based on only latitude or longitude. It is therefore necessary to query the longitude and latitude of each site in a list against a land mask in order to determine the correct order along the coastline. This is what will be demonstrated below.\n# devtools::install_github(\u0026quot;robwschlegel/coastR\u0026quot;) # Install coastR library(coastR) library(tidyverse) library(gridExtra)  Sample locations For the purpose of this vignette we will manually create a few dataframes for different coastlines around the world of varying degrees of complexity and length. The first two dataframes are taken from the SACTN site list included in the coastR package. The rest have their lon/lat values grabbed from Google maps. Note that the order of the sites is intentionally entered incorrectly so as to be able to demonstrate the efficacy of seq_sites().\n# Cape Point, South Africa cape_point \u0026lt;- SACTN_site_list %\u0026gt;% slice(c(31, 22, 26, 17, 19, 21, 30)) %\u0026gt;% mutate(order = 1:n()) # South Africa south_africa \u0026lt;- SACTN_site_list %\u0026gt;% slice(c(1,34, 10, 20, 50, 130, 90)) %\u0026gt;% mutate(order = 1:n()) # Baja Peninsula, Mexico baja_pen \u0026lt;- data.frame( order = 1:7, lon = c(-116.4435, -114.6800, -109.6574, -111.9503, -112.2537, -113.7918, -114.1881), lat = c(30.9639, 30.7431, 22.9685, 26.9003, 25.0391, 29.4619, 28.0929) ) # Bohai Sea, China bohai_sea \u0026lt;- data.frame( order = 1:7, lon = c(122.0963, 121.2723, 121.0687, 121.8742, 120.2962, 117.6650, 122.6380), lat = c(39.0807, 39.0086, 37.7842, 40.7793, 40.0691, 38.4572, 37.4494) )  Sequential sites Now that we have our sample sites it is time to order them correctly along the coast sequentially. Should one prefer the opposite order to what seq_sites() produces, this may be changed by using the reverse argument found within the function. Additionally, if one has sites located on islands just off the coast, one may choose to allow the algorithm to take these islands into account. Note that this then will force the algorithm to calculate the sequential order of these sites as though they were part of a different sequence because they will no longer be on the same 1D plain. Generally this would not be desirable and one would rather order sites on coastal islands in line with the rest of the coast. This is the default setting, but we may see how this changes with the Baja Peninsula site list.\n# NB: This code will produce warnings # This is fine as it is stating that the # \u0026#39;order\u0026#39; column has been re-written, # which is the intended result of this function. # Cape Point, South Africa cape_point_seq \u0026lt;- seq_sites(cape_point) # South Africa south_africa_seq \u0026lt;- seq_sites(south_africa) # Baja Peninsula, Mexico baja_pen_seq \u0026lt;- seq_sites(baja_pen) baja_pen_island_seq \u0026lt;- seq_sites(baja_pen, coast = FALSE) # Bohai sea, China bohai_sea_seq \u0026lt;- seq_sites(bohai_sea)  Comparison With the sites correctly ordered sequentially along the coast we may now compare the before and after products. To do so in a tidy way we will first create a function that plots our sites for us on a global map.\n# Create base map world_map \u0026lt;- ggplot() + borders(fill = \u0026quot;grey40\u0026quot;, colour = \u0026quot;black\u0026quot;) # Create titles titles \u0026lt;- c(\u0026quot;Deurmekaar\u0026quot;, \u0026quot;Sequential\u0026quot;, \u0026quot;Islands\u0026quot;) # Plotting function plot_sites \u0026lt;- function(site_list, buffer, title_choice){ world_map + geom_point(data = site_list, size = 6, aes(x = lon, y = lat, colour = as.factor(order))) + coord_cartesian(xlim = c(min(site_list$lon - buffer), max(site_list$lon + buffer)), ylim = c(min(site_list$lat - buffer), max(site_list$lat + buffer))) + labs(x = \u0026quot;\u0026quot;, y = \u0026quot;\u0026quot;, colour = \u0026quot;Site\\norder\u0026quot;) + ggtitle(titles[title_choice]) } Cape Point, South Africa cape_point_map \u0026lt;- plot_sites(cape_point, 0.5, 1) cape_point_seq_map \u0026lt;- plot_sites(cape_point_seq, 0.5, 2) grid.arrange(cape_point_map, cape_point_seq_map, nrow = 1) (#fig:cape_point_comp)Comparison of site ordering around Cape Point, South Africa.   South Africa south_africa_map \u0026lt;- plot_sites(south_africa, 1, 1) south_africa_seq_map \u0026lt;- plot_sites(south_africa_seq, 1, 2) grid.arrange(south_africa_map, south_africa_seq_map, nrow = 1) (#fig:south_africa_comp)Comparison of site ordering around South Africa.   Baja Peninsula, Mexico Note in the image below that site seven in the ‘Islands’ panel appears to be ordered incorrectly. This is because we have asked the function to first look for sites along the coast, and then order sites around nearby islands by setting the argument coast to TRUE. This is because the algorithm only works on one continuous line. When islands are introduced this then represents a second set of 1D coordinates and so the algorithm plans accordingly. This feature has been added so that if one chooses to have islands be apart from the initial ordering of the coastal sites it may be done. The default however is to remove islands from the coastal land mask so that they are ordered according to their nearest location to the coast.\nbaja_pen_map \u0026lt;- plot_sites(baja_pen, 1, 1) baja_pen_seq_map \u0026lt;- plot_sites(baja_pen_seq, 1, 2) baja_pen_island_seq_map \u0026lt;- plot_sites(baja_pen_island_seq, 1, 3) grid.arrange(baja_pen_map, baja_pen_seq_map, baja_pen_island_seq_map, nrow = 1) (#fig:baja_pen_comp)Comparison of site ordering around the Baja Peninsula, Mexico.   Bohai Sea, China Below in the ‘Sequential’ panel we see the result of having set the reverse argument to TRUE. Hardly noticeable, but potentially useful.\nbohai_sea_map \u0026lt;- plot_sites(bohai_sea, 1, 1) bohai_sea_seq_map \u0026lt;- plot_sites(bohai_sea_seq, 1, 2) grid.arrange(bohai_sea_map, bohai_sea_seq_map, nrow = 1) (#fig:bohai_sea_comp)Comparison of site ordering around the Bohai Sea, China.    Conclusion The usefulness of the seq_sites() function is demonstrated above on a number of different scales and coastal features. This is in no way an exhaustive test of this function and I welcome any input from anyone that uses it for their own work. The premise on which this function operates is very basic and so theoretically it should be very adaptive. The only thing to look out for is if one has a very convoluted coastline with a long stretch without any sites as the algorithm may think this is two separate coastlines.\n ","date":1503446400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1503446400,"objectID":"7a43619848704f8b7bebc1e722ea8771","permalink":"https://theoceancode.netlify.com/post/seq_sites/","publishdate":"2017-08-23T00:00:00Z","relpermalink":"/post/seq_sites/","section":"post","summary":"Preface The rest of the blog post after this preface section is a copy of the vignette I’ve written for the first function in the new package I am developing: coastR. This package aims to provide functions that are useful for coastal oceanography but that do not yet exist in the R language. It is not my intention to provide algorithms for physical oceanography as these may already be found elsewhere.","tags":["coastal"],"title":"Sequential sites","type":"post"},{"authors":null,"categories":["R"],"content":" Objective There are many different things that require scientists to use programming languages (like R). Far too many to count here. There is however one common use amongst almost all environmental scientists: mapping. Almost every report, research project or paper will have need to refer to a study area. This is almost always “Figure 1”. To this end, whenever I teach R, or run workshops on it, one of the questions I am always prepared for is how to create a map of a particular area. Being a happy convert to the tidyverse I only teach the graphics of ggplot2. I have found that people often prefer to use the ggmap extension to create ggplot quality figures with Google map backgrounds, but I personally think that a more traditional monotone background for maps looks more professional. What I’ve decided to showcase this week is the data and code required to create a publication quality map. Indeed, the following code will create the aforementioned obligatory “Figure 1” in a paper I am currently preparing for submission.\n Data There are heaps of packages etc. that one may use to create maps. And there is a never ending source of blogs, books and tutorials that illustrate many of the different ways to visualise spatial data. For my international and geographic borders I prefer to use data I’ve downloaded from GSHHSG and then converted to dataframes using functions found in the PBSmapping package. I then save these converted dataframes as .Rdata objects on my computer for ease of use with all of my projects. For the domestic borders of a country, which I won’t use in this post, one may go here. Note however that for some strange reason this website still has the pre-1994 borders for South Africa. For the correct SA borders one must go here. The current SA borders may actually be download in the .Rdata format, which is neat.\nOnce one has the borders to be used in the map, the next step is to think about what one actually wants to show. The main purpose of this map is to show where several in situ coastal seawater temperature time series were collected. This could be done quite simply but a plain black and white map is offensively boring so we want to make sure there is a good amount of (but not too much!) colour in order to entice the reader. I personally find pictures of meso-scale oceanic phenomena particularly beautiful so try to include them whenever I can. Luckily that is also what I study so it is not strange that I include such things in my work. Now if only I studied panda’s, too…\nPanda’s aside, the current work I am engaged in also requires that the atmospheric processes around southern Africa be considered in addition to the oceanography. To visualise both air and sea concurrently would be a mess so we will want to create separate panels for each. Because I have been working with reanalysis data lately, and not satellite data, I am also able to include the wind/ current vectors in order to really help the temperature patterns pop. The oceanic data are from the BRAN2016 product and the atmospheric data are from ERA-Interim. Both of which are available for download for free for scientific pursuits. I’ve chosen here to use the mean values for January 1st as the summer months provide the most clear example of the thermal differences between the Agulhas and Benguela currents. The code used to create the scale bar in the maps may be found here. It’s not a proper ggplot geom function but works well enough. I’ve also decided to add the 200 m isobath to the sea panel. These data come from NOAA.\n## Libraries library(tidyverse) library(viridis) library(gridExtra) ## Data # South Africa map data load(\u0026quot;../../static/data/southern_africa_coast.Rdata\u0026quot;) # Lowres names(southern_africa_coast)[1] \u0026lt;- \u0026quot;lon\u0026quot; load(\u0026quot;../../static/data/sa_shore.Rdata\u0026quot;) # Hires names(sa_shore)[4:5] \u0026lt;- c(\u0026quot;lon\u0026quot;,\u0026quot;lat\u0026quot;) # International borders load(\u0026quot;../../static/data/africa_borders.Rdata\u0026quot;) # Reanalysis data load(\u0026quot;../../static/data/all_jan1_0.5.Rdata\u0026quot;) names(all_jan1_0.5)[1:2] \u0026lt;- c(\u0026quot;lon\u0026quot;,\u0026quot;lat\u0026quot;) # In situ time series locations site_list \u0026lt;- read_csv(\u0026quot;../../static/data/mg_site_list.csv\u0026quot;) site_list$order \u0026lt;- 1:nrow(site_list) # Bathymetry data load(\u0026quot;../../static/data/sa_bathy.Rdata\u0026quot;) ## Scale bar function source(\u0026quot;../../static/func/scale.bar.func.R\u0026quot;)  Mapping I find that it is easier to keep track of the different aspects of a map when they are stored as different dataframes. One should however avoid having too many loose dataframes running about in the global environment. It is a balancing act and requires one to find a happy middle ground. Here I am going to cut the all_jan1_0.5 dataframe into 4. One each for air and sea temperatures and vectors. I am also going to reduce the resolution of the wind so that the vectors will plot more nicely.\n# Devide the reanalysis data sea_temp \u0026lt;- filter(all_jan1_0.5, variable == \u0026quot;BRAN/temp\u0026quot;) air_temp \u0026lt;- filter(all_jan1_0.5, variable == \u0026quot;ERA/temp\u0026quot;) currents \u0026lt;- filter(all_jan1_0.5, variable == \u0026quot;BRAN/u\u0026quot; | variable == \u0026quot;BRAN/v\u0026quot;) %\u0026gt;% select(-date, -index) %\u0026gt;% spread(key = variable, value = value) %\u0026gt;% rename(u = \u0026quot;BRAN/u\u0026quot;, v = \u0026quot;BRAN/v\u0026quot;) winds \u0026lt;- filter(all_jan1_0.5, variable == \u0026quot;ERA/u\u0026quot; | variable == \u0026quot;ERA/v\u0026quot;) %\u0026gt;% select(-date, -index) %\u0026gt;% spread(key = variable, value = value) %\u0026gt;% rename(u = \u0026quot;ERA/u\u0026quot;, v = \u0026quot;ERA/v\u0026quot;) # Reduce wind/ current vectors lon_sub \u0026lt;- seq(10, 40, by = 1) lat_sub \u0026lt;- seq(-40, -15, by = 1) # currents \u0026lt;- currents[(currents$lon %in% lon_sub \u0026amp; currents$lat %in% lat_sub),] winds \u0026lt;- winds[(winds$lon %in% lon_sub \u0026amp; winds$lat %in% lat_sub),] With just a few alterations to our nicely divided up dataframes we are ready to create a map. We will look at the code required to create each map and then put it all together in the end.\nFirst up is the most busy. The following code chunk will create the top panel of our map, the sea state. It is necessary to label all of the locations mentioned in the text and so they are thrown on here. In order to make the site label easier to read I’ve made them red. This is particularly jarring but I think I like it.\n# Establish the vector scalar for the currents current_uv_scalar \u0026lt;- 2 # The top figure (sea) mg_top \u0026lt;- ggplot(data = southern_africa_coast, aes(x = lon, y = lat)) + # The ocean temperature geom_raster(data = sea_temp, aes(fill = value)) + # The bathymetry stat_contour(data = sa_bathy[sa_bathy$depth \u0026lt; -200 \u0026amp; sa_bathy$depth \u0026gt; -2000,], aes(x = lon, y = lat, z = depth, alpha = ..level..), colour = \u0026quot;ivory\u0026quot;, size = 0.5, binwidth = 1000, na.rm = TRUE, show.legend = FALSE) + # The current vectors geom_segment(data = currents, aes(xend = lon + u * current_uv_scalar, yend = lat + v * current_uv_scalar), arrow = arrow(angle = 15, length = unit(0.02, \u0026quot;inches\u0026quot;), type = \u0026quot;closed\u0026quot;), alpha = 0.4) + # The land mass geom_polygon(aes(group = group), fill = \u0026quot;grey70\u0026quot;, colour = \u0026quot;black\u0026quot;, size = 0.5, show.legend = FALSE) + geom_path(data = africa_borders, aes(group = group)) + # The legend for the vector length geom_label(aes(x = 36, y = -37, label = \u0026quot;1.0 m/s\\n\u0026quot;), size = 3, label.padding = unit(0.5, \u0026quot;lines\u0026quot;)) + geom_segment(aes(x = 35, y = -37.5, xend = 37, yend = -37.5)) + # The in situ sites geom_point(data = site_list, shape = 1, size = 2.8, colour = \u0026quot;ivory\u0026quot;) + geom_text(data = site_list, aes(label = order), size = 1.9, colour = \u0026quot;red\u0026quot;) + # Oceans annotate(\u0026quot;text\u0026quot;, label = \u0026quot;INDIAN\\nOCEAN\u0026quot;, x = 37.00, y = -34.0, size = 4.0, angle = 0, colour = \u0026quot;ivory\u0026quot;) + annotate(\u0026quot;text\u0026quot;, label = \u0026quot;ATLANTIC\\nOCEAN\u0026quot;, x = 13.10, y = -34.0, size = 4.0, angle = 0, colour = \u0026quot;ivory\u0026quot;) + # Benguela geom_segment(aes(x = 17.2, y = -32.6, xend = 15.2, yend = -29.5), arrow = arrow(length = unit(0.3, \u0026quot;cm\u0026quot;)), size = 0.5, colour = \u0026quot;ivory\u0026quot;) + annotate(\u0026quot;text\u0026quot;, label = \u0026quot;Benguela\u0026quot;, x = 16.0, y = -31.8, size = 3.5, angle = 298, colour = \u0026quot;ivory\u0026quot;) + # Agulhas geom_segment(aes(x = 33, y = -29.5, xend = 29.8, yend = -33.0), arrow = arrow(length = unit(0.3, \u0026quot;cm\u0026quot;)), size = 0.5, colour = \u0026quot;ivory\u0026quot;) + annotate(\u0026quot;text\u0026quot;, label = \u0026quot;Agulhas\u0026quot;, x = 31.7, y = -31.7, size = 3.5, angle = 53, colour = \u0026quot;ivory\u0026quot;) + # Agulhas Bank annotate(\u0026quot;text\u0026quot;, label = \u0026quot;Agulhas\\nBank\u0026quot;, x = 22.5, y = -35.5, size = 3.0, angle = 0, colour = \u0026quot;ivory\u0026quot;) + # Cape Peninsula annotate(\u0026quot;text\u0026quot;, label = \u0026quot;Cape\\nPeninsula\u0026quot;, x = 17.2, y = -35, size = 3.0, angle = 0, colour = \u0026quot;ivory\u0026quot;) + # Improve on the x and y axis labels scale_x_continuous(breaks = seq(15, 35, 5), labels = scales::unit_format(prefix = \u0026quot;°E\u0026quot;, sep = \u0026quot;\u0026quot;), position = \u0026quot;top\u0026quot;) + scale_y_continuous(breaks = seq(-35, -30, 5), labels = c(\u0026quot;35°S\u0026quot;, \u0026quot;30°S\u0026quot;)) + labs(x = NULL, y = NULL) + # Slightly shrink the plotting area coord_cartesian(xlim = c(10.5, 39.5), ylim = c(-39.5, -25.5), expand = F) + # Use viridis colour scheme scale_fill_viridis(name = \u0026quot;Temp.\\n(°C)\u0026quot;, option = \u0026quot;D\u0026quot;) + # Adjust the theme theme_bw() + theme(panel.border = element_rect(fill = NA, colour = \u0026quot;black\u0026quot;, size = 1), axis.text = element_text(colour = \u0026quot;black\u0026quot;), axis.ticks = element_line(colour = \u0026quot;black\u0026quot;)) Many of the sites that need to be plotted are laying on top of each other. This is never good, but is made worse when the sites in question are refereed to frequently in the text. For this reason we need to create a little panel inside of the larger figure that shows a zoomed in picture of False Bay. Complete with text labels.\n# False Bay inset fb \u0026lt;- ggplot(data = sa_shore, aes(x = lon, y = lat)) + # The land mass geom_polygon(aes(group = PID), fill = \u0026quot;grey70\u0026quot;, colour = NA, size = 0.5, show.legend = FALSE) + # The in situ sites geom_point(data = site_list, shape = 1, size = 3, colour = \u0026quot;black\u0026quot;) + geom_text(data = site_list, aes(label = order), size = 2.3, colour = \u0026quot;red\u0026quot;) + # Text label geom_text(aes(x = 18.65, y = -34.25, label = \u0026quot;False\\nBay\u0026quot;), size = 2.7) + # Control the x and y axes coord_cartesian(xlim = c(18.2, 19), ylim = c(-34.5, -33.8), expand = F) + scale_x_continuous(breaks = c(18.5), label = \u0026quot;18.5°E\u0026quot;) + scale_y_continuous(breaks = c(-34.1), label = \u0026quot;34.1°S\u0026quot;) + labs(x = NULL, y = NULL) + # Change the theme for cleaner over-plotting theme_bw() + theme(plot.background = element_blank(), axis.text = element_text(colour = \u0026quot;ivory\u0026quot;), axis.text.y = element_text(angle = 90, hjust = 0.5), axis.ticks = element_line(colour = \u0026quot;ivory\u0026quot;), panel.border = element_rect(colour = \u0026quot;ivory\u0026quot;), panel.grid = element_blank()) We could possibly create another inset panel for the clomp of sites around Hamburg but this figure is already getting too busy. So we’ll leave it for now. One inset panel will serve to illustrate the code necessary to create a faceted map so for the purposes of this post it will also suffice. That leaves us with only the bottom panel to create. The air state. I’ve decided to put the scale bar/ North arrow on this panel in an attempt to balance the amount of information in each panel.\n# Establish the vector scalar for the wind wind_uv_scalar \u0026lt;- 0.5 # The bottom figure (air) mg_bottom \u0026lt;- ggplot(data = southern_africa_coast, aes(x = lon, y = lat)) + # The ocean temperature geom_raster(data = air_temp, aes(fill = value)) + # The land mass geom_polygon(aes(group = group), fill = NA, colour = \u0026quot;black\u0026quot;, size = 0.5, show.legend = FALSE) + geom_path(data = africa_borders, aes(group = group)) + # The current vectors geom_segment(data = winds, aes(xend = lon + u * wind_uv_scalar, yend = lat + v * wind_uv_scalar), arrow = arrow(angle = 15, length = unit(0.02, \u0026quot;inches\u0026quot;), type = \u0026quot;closed\u0026quot;), alpha = 0.4) + # The legend for the vector length geom_label(aes(x = 36, y = -37, label = \u0026quot;4.0 m/s\\n\u0026quot;), size = 3, label.padding = unit(0.5, \u0026quot;lines\u0026quot;)) + geom_segment(aes(x = 35, y = -37.5, xend = 37, yend = -37.5)) + # Improve on the x and y axis labels scale_x_continuous(breaks = seq(15, 35, 5), labels = scales::unit_format(prefix = \u0026quot;°E\u0026quot;, sep = \u0026quot;\u0026quot;)) + scale_y_continuous(breaks = seq(-35, -30, 5), labels = c(\u0026quot;35°S\u0026quot;, \u0026quot;30°S\u0026quot;)) + labs(x = NULL, y = NULL) + # Scale bar scaleBar(lon = 13, lat = -38.0, distanceLon = 200, distanceLat = 50, distanceLegend = 90, dist.unit = \u0026quot;km\u0026quot;, arrow.length = 200, arrow.distance = 130, arrow.North.size = 4) + # Slightly shrink the plotting area coord_cartesian(xlim = c(10.5, 39.5), ylim = c(-39.5, -25.5), expand = F) + # Use viridis colour scheme scale_fill_viridis(name = \u0026quot;Temp.\\n(°C)\u0026quot;, option = \u0026quot;A\u0026quot;) + # Adjust the theme theme_bw() + theme(panel.border = element_rect(fill = NA, colour = \u0026quot;black\u0026quot;, size = 1), axis.text = element_text(colour = \u0026quot;black\u0026quot;), axis.ticks = element_line(colour = \u0026quot;black\u0026quot;)) With our three pieces of the map complete, it is time to stick them together. There are many ways to do this but I have recently found that using annotation_custom allows one to stick any sort of ggplot like object onto any other sort of ggplot object. This is an exciting development and opens up a lot of doors for some pretty creative stuff. Here I will just use it to demonstrate simple faceting, but combined with panel gridding. Really though the sky is the limit.\n# Convert the figures to grobs mg_top_grob \u0026lt;- ggplotGrob(mg_top) fb_grob \u0026lt;- ggplotGrob(fb) mg_bottom_grob \u0026lt;- ggplotGrob(mg_bottom) # Stick them together gg \u0026lt;- ggplot() + # First set the x and y axis values so we know what the ranges are # in order to make it easier to place our facets coord_equal(xlim = c(1, 10), ylim = c(1, 10), expand = F) + # Then we place our facetsover one another using the coordinates we created annotation_custom(mg_top_grob, xmin = 1, xmax = 10, ymin = 5.5, ymax = 10) + annotation_custom(fb_grob, xmin = 3.5, xmax = 5.5, ymin = 7.2, ymax = 8.8) + annotation_custom(mg_bottom_grob, xmin = 1, xmax = 10, ymin = 1, ymax = 5.5)  Summary The developments in the gridding system have brought the potential for using ggplot for these more complex maps forward quite a bit. As long as one does not use a constrained mapping coordinate system (i.e. coord_fixed) the grob-ification of the ggplot objects seems to allow the placing of the pieces into a common area to be performed smoothly. Displaying many different bits of information cleanly is always a challenge. This figure is particularly busy, out of necessity. I think it turned out very nicely though.\nFigure 1: Map showing the southern tip of the African continent. The top panel shows the typical sea surface temperature and surface currents on January 1st. The bottom panel likewise shows the typical surface air temperatures and winds on any given January 1st.\n ","date":1500249600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1500249600,"objectID":"6ff3492645db9203cc9ca5254c54bf1b","permalink":"https://theoceancode.netlify.com/post/mapping_with_ggplot2/","publishdate":"2017-07-17T00:00:00Z","relpermalink":"/post/mapping_with_ggplot2/","section":"post","summary":"Objective There are many different things that require scientists to use programming languages (like R). Far too many to count here. There is however one common use amongst almost all environmental scientists: mapping. Almost every report, research project or paper will have need to refer to a study area. This is almost always “Figure 1”. To this end, whenever I teach R, or run workshops on it, one of the questions I am always prepared for is how to create a map of a particular area.","tags":["visuals","mapping","wind","ocean","atmosphere"],"title":"Mapping with ggplot2","type":"post"},{"authors":null,"categories":["R"],"content":" Objective A few weeks ago for a post about the relationship between gender equality and GDP/ capita I found a nifty website that has a massive amount of census information for most countries on our planet. Much of this information could be used to answer some very interesting and/ or important questions. But some of the data can be used to answer seemingly pointless questions. And that’s what I intend to do this week. Specifically, which countries in the world have the highest rates of goats/ capita?\n Data The goats per capita data were downloaded from the clia-infra website. These data are already in the format we need so there is little to be done before jumping straight into the analysis. We will however remove any records from before 1900 as these are almost entirely estimates, and not real records.\n# Load libraries library(tidyverse) library(gridExtra) # Load data goats \u0026lt;- read_csv(\u0026quot;../../static/data/GoatsperCapita_Compact.csv\u0026quot;) %\u0026gt;% filter(year \u0026gt;= 1900)  Analysis First of all, I would like to know what the global trend in goats/ capita has been since 1900. To do so we need to create annual averages and apply a simple linear model to them. We will also plot boxplots to give us an idea of the spread of goats/ capita over the world.\ngoats %\u0026gt;% group_by(year) %\u0026gt;% select(-ccode, -country.name) %\u0026gt;% summarise(value = mean(value)) %\u0026gt;% ggplot(aes(x = year, y = value)) + geom_boxplot(data = goats, aes(group = year)) + geom_smooth(method = \u0026quot;lm\u0026quot;) Figure 1: Boxplots with a fitted linear model showing the global trend in goats/ capita over the last century.\nAs we may see in Figure 1, the overall trend in goats/ capita in the world has been decreasing very slightly over the last century. The striking result from Figure 1 however is the massive range of values as seen by the outliers from the boxplots. So which countries are these that have so many more goats/ capita than the rest of the world?\nWe want to see which countries have the most goats/ capita but there are 172 unique countries in this dataset so it would look much too busy to plot them all. To that end we want only the top and bottom 10 countries from the most recent year of reporting (2010).\n# Top 10 goat having countries goats_top \u0026lt;- goats %\u0026gt;% arrange(desc(value)) %\u0026gt;% filter(ccode %in% head(unique(ccode), 10)) # Bottom 10 goats_bottom \u0026lt;- goats %\u0026gt;% arrange(value) %\u0026gt;% filter(ccode %in% head(unique(ccode), 10)) # Line graphs gt \u0026lt;- ggplot(data = goats_top, aes(x = year, y = value)) + geom_line(aes(colour = country.name)) + labs(y = \u0026quot;Goats/ Capita\u0026quot;, x = NULL) + scale_x_continuous(expand = c(0,0)) + scale_color_brewer(name = NULL, palette = \u0026quot;Set3\u0026quot;) + theme(legend.position = \u0026quot;top\u0026quot;) gb \u0026lt;- ggplot(data = goats_bottom, aes(x = year, y = value)) + geom_line(aes(colour = country.name)) + labs(y = \u0026quot;Goats/ Capita\u0026quot;, x = NULL) + scale_x_continuous(expand = c(0,0)) + theme(legend.position = \u0026quot;bottom\u0026quot;, legend.title = element_blank()) # Combine grid.arrange(gt, gb) Figure 2: Line graphs showing the rate of goats/ capita for the top and bottom 10 goat having countries in the world over the last century.\n Summary I was a bit surprised to find that Mongolia is far and away the country with the most goats/ capita at 5.140 in 2010. Less surprising is that the other top 9 goat having countries in the world in 2010 were all in Africa and their rate of goats/ capita was between 1.634 (Mauritania) to 0.124 (South Africa). This makes for a massive spread in what is already an outlying set of countries. How is it that Mongolia has so many more goats/ capita? This is a very odd result but the data were reported annually from 2000 to 2010 and they consistently show similarly high rates for Mongolia.\nThe bottom 10 goat having countries in the world are a mix of European, Asian, North American and Pacific Islands. This mix is not surprising as we may see in Figure 1 that there are no outliers in the bottom of the distribution. The highest value for the bottom 10 countries in 2010 was Tonga at 0.121. This is very close to the lowest value from the top 10 countries, and shows us that most of the 172 countries in this dataset have ~0.12 goats per person. With this average in mind, we see that the other bottom nine countries in Figure 2 really are much lower than the global average with rates approaching 0 goats/ capita. It is worth mentioning that the lowest overall rate of goats/ capita in 2010 was Japan at 0.0001. Meaning that there is only one goat in Japan for every 10,000 people. As opposed to Mongolia that has more than five goats for every one person. Therefore there were 50,000 times more goats/ capita in Mongolia than Japan in 2010…\nI supposes the take away message from this analysis is that if one ever wants to get away from it all and just go spend time with a lot of goats, Mongolia is the place for you!\n(and definitely avoid Japan)\n ","date":1499644800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1499644800,"objectID":"54928ea115efd559d11ae3ba68dd234f","permalink":"https://theoceancode.netlify.com/post/goats_per_capita/","publishdate":"2017-07-10T00:00:00Z","relpermalink":"/post/goats_per_capita/","section":"post","summary":"Objective A few weeks ago for a post about the relationship between gender equality and GDP/ capita I found a nifty website that has a massive amount of census information for most countries on our planet. Much of this information could be used to answer some very interesting and/ or important questions. But some of the data can be used to answer seemingly pointless questions. And that’s what I intend to do this week.","tags":["goats"],"title":"Goats per capita","type":"post"},{"authors":null,"categories":["R"],"content":" Objective As an immigrant myself, all of the talk of immigration to be found in main stream media outlets today makes me a bit nervous. Whereas most people that speak of the pro’s and con’s of immigration do so from the point of view of how it may affect the country of their birth, I view this issue as something that affects my ability to live outside the country of my birth. I immigrated into the Republic of South Africa in 2013 and have been living here since. I would do a piece on South African immigration but the numbers are difficult to get a hold of and honestly most people are less interest in South Africa than the USA.\nImmigration is not a new talking point. It’s something that comes up in political and a-political circles all of the time. The current debate on the Muslim Ban in the USA may have reached a new level for this sort of rhetoric in the West, but targeted crackdowns of this sort are not new in the world. I won’t bother with citations here, but if one is interested a quick google of “xenophobia” + “border control” should yield some convincing results. As this current row of immigration debates in the USA has become so partisan, I decided that an interesting question to ask would be “Under which of the two parties have more people immigrated into the USA?” and “Under which of the two parties have more people been removed from the USA?”\n Data The historical data on immigration into the USA are located at the Department of Homeland Securities website. In 2013 the DHS started keeping very detailed reports of all immigration by age, country, marital status, etc. These highly detailed data are very interesting but will not help us to ask our central questions. We want long time series of data so that we may compare many different administrations from each party. For ease of analysis I have chosen to classify the party in power at any point in time based on the party of the President. I understand that the Senate or Congress would perhaps be better, if not more egalitarian choices, but the current focus of this issue has the US President at it’s core, so I decided to keep that theme constant in this analysis. I’ll only start from Eisenhower and go up until Obama as the publicly available DHS data end in 2015. They begin as far back as 1892, but ggplot2 has built into it a US president dataframe and I am going to just use that because I’m lazy.\n# Libraries library(tidyverse) library(lubridate) library(broom) library(gridExtra) # President data data(presidential) presidential$start \u0026lt;- year(presidential$start) presidential$end \u0026lt;- year(presidential$end)-1 # Create index of party years # I couldn\u0026#39;t think of a clever automatic way of doing this... party_year \u0026lt;- data.frame(Year = seq(1953, 2016), Party = c(rep(\u0026quot;Republican\u0026quot;,8), rep(\u0026quot;Democrat\u0026quot;,8), rep(\u0026quot;Republican\u0026quot;,8), rep(\u0026quot;Democrat\u0026quot;,4), rep(\u0026quot;Republican\u0026quot;,12), rep(\u0026quot;Democrat\u0026quot;,8), rep(\u0026quot;Republican\u0026quot;,8), rep(\u0026quot;Democrat\u0026quot;,8))) # Immigration data green_card \u0026lt;- read_csv(\u0026quot;../../static/data/Persons Obtaining Lawful Permanent Resident Status-Fiscal Years 1820 to 2015.csv\u0026quot;) green_card \u0026lt;- merge(green_card, party_year, by = \u0026quot;Year\u0026quot;) removals \u0026lt;- read_csv(\u0026quot;../../static/data/Aliens Removed Or Returned-Fiscal Years 1892 To 2015.csv\u0026quot;) removals \u0026lt;- merge(removals, party_year, by = \u0026quot;Year\u0026quot;)  Immigration In this first figure we are defining immigration as the number of people actually receiving a green card in any given year. This is the most strict definition of “immigration” and I think may be best used to show whom the USA was choosing to let in.\nggplot(data = green_card, aes(x = Year, y = Number)) + geom_col(aes(fill = Party), colour = \u0026quot;black\u0026quot;) + geom_smooth(method = \u0026quot;lm\u0026quot;, colour = \u0026quot;black\u0026quot;) + labs(x = NULL, y = \u0026quot;Green Cards Granted\u0026quot;) + scale_fill_manual(values = c(\u0026quot;slateblue1\u0026quot;, \u0026quot;firebrick1\u0026quot;)) Figure 1: Bar charts showing the number of green cards granted each year in the USA. The colour of the bars show the ruling party at the time of issuance. A linear model is imposed in black.\nWe may see in Figure 1 that the all time high for the granting of green cards was during the four year administration of George Bush Senior. These values are so much higher than the other administrations that it leverages the linear model drawn on these data up past where it should normally be to show the more normal trend exhibited by all of the other administrations since Eisenhower. That being said, we actually see a bit of a turn down during the Obama administration, with the largest year of green card issuance during the George Bush Junior administration larger than any year under Obama. I find that surprising. Figure 1 also shows us that we can’t really directly compare the different administrations because as populations increase, so too will the number of people that want to immigrate. In a quick pinch however we may use the residuals from the linear model to give us a slightly better visualisation of how the parties stack up against one another.\n# Calculate residuals green_card_resids \u0026lt;- augment(lm(Number~Year, data = green_card)) green_card_resids \u0026lt;- merge(green_card_resids, party_year, by = \u0026quot;Year\u0026quot;) # Plot them ggplot(data = green_card_resids, aes(x = Year, y = .resid)) + geom_col(aes(fill = Party), colour = \u0026quot;black\u0026quot;) + geom_smooth(method = \u0026quot;lm\u0026quot;, colour = \u0026quot;black\u0026quot;) + labs(x = NULL, y = \u0026quot;Green Cards Granted\u0026quot;) + scale_fill_manual(values = c(\u0026quot;slateblue1\u0026quot;, \u0026quot;firebrick1\u0026quot;)) Figure 2: The residuals from a linear model fitted to the data shown in Figure 1.\nIt appears as though whenever there was a Bush in office it was much easier to get a green card. And that Democrats generally made it more difficult to do so.\n Expulsion Now that we have seen that it is easier to enter the USA during a Republican presidency, let’s see under which party an illegal immigrant is most likely to be expelled. There are two different classes of expulsion: ‘Removal’ and ‘Return’. Removal means that a legal order was issued to remove the individual. Return means that the individual was likewise not legally in the states, but left of their own volition.\n# Returns return_bar \u0026lt;- ggplot(data = removals, aes(x = Year, y = Returns)) + geom_col(aes(fill = Party), colour = \u0026quot;black\u0026quot;) + # geom_smooth(method = \u0026quot;lm\u0026quot;, colour = \u0026quot;black\u0026quot;) + labs(x = NULL, y = \u0026quot;Immigrants Returned\u0026quot;) + scale_fill_manual(values = c(\u0026quot;slateblue1\u0026quot;, \u0026quot;firebrick1\u0026quot;)) + ggtitle(\u0026quot;Returns\u0026quot;) # Removals removal_bar \u0026lt;- ggplot(data = removals, aes(x = Year, y = Removals)) + geom_col(aes(fill = Party), colour = \u0026quot;black\u0026quot;) + # geom_smooth(method = \u0026quot;lm\u0026quot;, colour = \u0026quot;black\u0026quot;) + labs(x = NULL, y = \u0026quot;Immigrants Removed\u0026quot;) + scale_fill_manual(values = c(\u0026quot;slateblue1\u0026quot;, \u0026quot;firebrick1\u0026quot;)) + ggtitle(\u0026quot;Removals\u0026quot;) # Stick\u0026#39;em grid.arrange(return_bar, removal_bar) Figure 3: Two bar charts showing the rates of returns and removals for immigrants from the USA.\nFigure 3 tells a very interesting story. In the top panel (Returns), we see that from 1953-55 (shortly after WWII) there were massive numbers of immigrants that returned to their home countries voluntarily. Then there is a period of increase leading up to the 80’s. This then follows a somewhat normal distribution, peaking in the late 90’s near the end of the Clinton administration before the peaceful return of immigrants drops steadily through the 8 years of Bush then Obama. The bottom panel (Removals) shows the reason for this apparent relaxation on immigrants. It isn’t that immigrants were being sent away less, but rather they began to be removed more forcefully than appears to have been the policy until something changed during the Clinton Administration. The rate of immigrants being removed became greater than those being returned in 2011 under Obama. Again we see a heavy hand on immigration during years with a Democratic president in office. It is hard to compare the parties on this issue as the policy of forcefully removing immigrants in favour of having them leave peacefully has only been in practice over three administrations (Clinton, Bush Jr. and Obama). That being said, it is worth noting that the y axes on these two figures are not the same. The increase in removals does not outweigh the decrease in returns. Overall the rate of expulsion of immigrants from the states declined during the Obama administration. And perhaps also Bush Jr.\nIt is fair criticism to point out that a green card may take several years to acquire. This means that when one begins the process of applying for a green card it may take so long that a different party will be in power by the time it is granted… or not. I would argue however that most of these parties (with the exception of Carter) are in office for eight year stretches. This is not meant to be a definitive analysis, but I think it has proven to be a rather interesting first step. I didn’t expect the data to look like this. George Bush Senior, saviour to immigrants, who would have thought.\n ","date":1499040000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1499040000,"objectID":"640294af5bf83aa29ec71f261900b44e","permalink":"https://theoceancode.netlify.com/post/party_immigration/","publishdate":"2017-07-03T00:00:00Z","relpermalink":"/post/party_immigration/","section":"post","summary":"Objective As an immigrant myself, all of the talk of immigration to be found in main stream media outlets today makes me a bit nervous. Whereas most people that speak of the pro’s and con’s of immigration do so from the point of view of how it may affect the country of their birth, I view this issue as something that affects my ability to live outside the country of my birth.","tags":["politics"],"title":"Party immigration","type":"post"},{"authors":null,"categories":["R"],"content":" Objective With more and more scientists moving to open source software (i.e. R or Python) to perform their numerical analyses the opportunities for collaboration increase and we may all benefit from this enhanced productivity. At the risk of sounding sycophantic, the future of scientific research truly is in multi-disciplinary work. What then could be inhibiting this slow march towards progress? We tend to like to stick to what is comfortable. Oceanographers in South Africa have been using MATLAB and ODV (Ocean Data View) since about the time that Jesus was lacing up his sandals for his first trip to Palestine. There has been much debate on the future of MATLAB in science, so I won’t get into that here, but I will say that the package oce contains much of the code that one would need for oceanographic work in R, and the package angstroms helps one to work with ROMS (Regional Ocean Modeling System) output. The software that has however largely gone under the radar in these software debates has been ODV. Probably because it is free (after registration) it’s fate has not been sealed by university departments looking to cut costs. The issue with ODV however is the same with all Microsoft products; the sin of having a “pointy clicky” user interface. One cannot perform truly reproducible research with a menu driven user interface. The steps must be written out in code. And so here I will lay out those necessary steps to create an interpolated CTD time series of temperature values that looks as close to the default output of ODV as possible.\nFigure 1: The default output of ODV when plotting temperature by depth through time at one location.\n  Colour palette Perhaps the most striking thing about the figures that ODV creates is it’s colour palette. A large criticism of this colour palette is that the range of colours used are not equally weighted visually, with the bright reds drawing ones eye more than the muted blues. This issue can be made up for using the viridis package, but for now we will stick to a ODV-like colour palette as that is part of our current objective. To create a colour palette that appears close to the ODV standard I used GIMP to extract the hexadecimal colour values from the colour bar in Figure 1.\n# Load libraries library(tidyverse) library(lubridate) library(reshape2) library(MBA) library(mgcv) # Load and screen data # For ease I am only using monthly means # and depth values rounded to 0.1 metres ctd \u0026lt;- read_csv(\u0026quot;../../static/data/ctd.csv\u0026quot;) %\u0026gt;% mutate(depth = -depth) %\u0026gt;% # Correct for plotting filter(site == 1) %\u0026gt;% select(date, depth, temperature) %\u0026gt;% rename(temp = temperature) #%\u0026gt;% ### Uncomment out the following lines to reduce the data resolution # mutate(date = round_date(date, unit = \u0026quot;month\u0026quot;)) %\u0026gt;% # mutate(depth = round(depth, 1)) %\u0026gt;% # group_by(date, depth) %\u0026gt;% # summarise(temp = round(mean(temp, na.rm = TRUE),1)) ### # Manually extracted hexidecimal ODV colour palette ODV_colours \u0026lt;- c(\u0026quot;#feb483\u0026quot;, \u0026quot;#d31f2a\u0026quot;, \u0026quot;#ffc000\u0026quot;, \u0026quot;#27ab19\u0026quot;, \u0026quot;#0db5e6\u0026quot;, \u0026quot;#7139fe\u0026quot;, \u0026quot;#d16cfa\u0026quot;) # Create quick scatterplot ggplot(data = ctd, aes(x = date, y = depth)) + geom_point(aes(colour = temp)) + scale_colour_gradientn(colours = rev(ODV_colours)) + labs(y = \u0026quot;depth (m)\u0026quot;, x = NULL, colour = \u0026quot;temp. (°C)\u0026quot;) Figure 2: A non-interpolated scatterplot of our temperature (°C) data shown as a function of depth (m) over time.\n Interpolating Figure 2 is a far cry from the final product we want, but it is a step in the right direction. One of the things that sets ODV apart from other visualisation software is that it very nicely interpolates the data you give it. While this looks nice, there is some criticism that may be leveled against doing so. That being said, what we want is a pretty visualisation of our data. We are not going to be using these data for any numerical analyses so the main priority is that the output allows us to better visually interpret the data. The package MBA already has the necessary functionality to do this, and it works with ggplot2, so we will be using this to get our figure. The interpolation method used by mba.surf() is multilevel B-splines.\nIn order to do so we will need to dcast() our data into a wide format so that it simulates a surface layer. spread() from the tidyr package doesn’t quite do what we need as we want a proper surface map, which is outside of the current ideas on the structuring of tidy data. Therefore, after casting our data wide we will use melt(), rather than gather(), to get the data back into long format so that it works with ggplot2.\nIt is important to note with the use of mba.surf() that it transposes the values while it is creating the calculations and so creating an uneven grid does not work well. Using the code written below one will always need to give the same specifications for pixel count on the x and y axes.\n# The date column must then be converted to numeric values ctd$date \u0026lt;- decimal_date(ctd$date) # Now we may interpolate the data ctd_mba \u0026lt;- mba.surf(ctd, no.X = 300, no.Y = 300, extend = T) dimnames(ctd_mba$xyz.est$z) \u0026lt;- list(ctd_mba$xyz.est$x, ctd_mba$xyz.est$y) ctd_mba \u0026lt;- melt(ctd_mba$xyz.est$z, varnames = c(\u0026#39;date\u0026#39;, \u0026#39;depth\u0026#39;), value.name = \u0026#39;temp\u0026#39;) %\u0026gt;% filter(depth \u0026lt; 0) %\u0026gt;% mutate(temp = round(temp, 1)) # Finally we create our gridded result ggplot(data = ctd_mba, aes(x = date, y = depth)) + geom_raster(aes(fill = temp)) + scale_fill_gradientn(colours = rev(ODV_colours)) + geom_contour(aes(z = temp), binwidth = 2, colour = \u0026quot;black\u0026quot;, alpha = 0.2) + geom_contour(aes(z = temp), breaks = 20, colour = \u0026quot;black\u0026quot;) + ### Activate to see which pixels are real and not interpolated # geom_point(data = ctd, aes(x = date, y = depth), # colour = \u0026#39;black\u0026#39;, size = 0.2, alpha = 0.4, shape = 8) + ### labs(y = \u0026quot;depth (m)\u0026quot;, x = NULL, fill = \u0026quot;temp. (°C)\u0026quot;) + coord_cartesian(expand = 0) Figure 3: The same temperature (°C) profiles seen in Figure 2 with the missing values filled in with multilevel B-splines. Note the artefact created in the bottom right corner. The 20°C contour line is highlighted in black.\nAt first glance this now appears to be a very good approximation of the output from ODV. An astute eye will have noticed that the temperatures along the bottom right corner of this figure are not interpolating in a way that appears possible. It is very unlikely that there would be a deep mixed layer underneath the thermoclines detected during 2015. The reason the splines create this artefact is that they are based on a convex hull around the real data points and so the interpolating algorithm wants to perform a regression towards a mean value away from the central point of where the spline is being calculated from. Because the thermoclines detected are interspersed between times where the entire water column consists of a mixed layer mba.surf() is filling in the areas without data as though they are a fully mixed surface layer.\n Bounding boxes There are many ways to deal with this problem with four possible fixes coming to mind quickly. The first is to set extend = F within mba.surf(). This tells the algorithm not to fill up every part of the plotting area and will alleviate some of the inaccurate interpolation that occurs but will not eliminate it. The second fix, which would prevent all inaccurate interpolation would be to limit the depth of all of the temperature profiles to be the same as the shallowest sampled profile. This is not an ideal fix because we would then lose quite a bit of information from the deeper sampling that occurred from 2013 to 2014. The third fix is to create a bounding box and screen out all of the interpolated data outside of it. A fourth option is to use soap-film smoothing over some other interpolation method, such as a normal GAM, concurrently with a bounding box. This is normally a good choice but does not work well with these data so I have gone with option three.\n# Create a bounding box # We want to slightly extend the edges so as to use all of our data left \u0026lt;- ctd[ctd$date == min(ctd$date),] %\u0026gt;% select(-temp) %\u0026gt;% ungroup() %\u0026gt;% mutate(date = date-0.01) bottom \u0026lt;- ctd %\u0026gt;% group_by(date) %\u0026gt;% summarise(depth = min(depth)) %\u0026gt;% mutate(depth = depth-0.01) right \u0026lt;- ctd[ctd$date == max(ctd$date),] %\u0026gt;% select(-temp) %\u0026gt;% ungroup() %\u0026gt;% mutate(date = date+0.01) top \u0026lt;- ctd %\u0026gt;% group_by(date) %\u0026gt;% summarise(depth = max(depth)) %\u0026gt;% mutate(depth = depth+0.01) bounding_box \u0026lt;- rbind(data.frame(left[order(nrow(left):1),]), data.frame(bottom), data.frame(right), data.frame(top[order(nrow(top):1),])) # Now that we have a bounding box we need to # screen out the pixels created outside of it bounding_box_list \u0026lt;- list(bounding_box) names(bounding_box_list[[1]]) \u0026lt;- c(\u0026quot;v\u0026quot;,\u0026quot;w\u0026quot;) v \u0026lt;- ctd_mba$date w \u0026lt;- ctd_mba$depth ctd_mba_bound \u0026lt;- ctd_mba[inSide(bounding_box_list, v, w),] # Correct date values back to date format # Not used as it introduces blank space into the figure # ctd_mba_bound$date \u0026lt;- as.Date(format(date_decimal(ctd_mba_bound$date), \u0026quot;%Y-%m-%d\u0026quot;)) # The screened data ggplot(data = ctd_mba_bound, aes(x = date, y = depth)) + geom_raster(aes(fill = temp)) + scale_fill_gradientn(colours = rev(ODV_colours)) + geom_contour(aes(z = temp), binwidth = 2, colour = \u0026quot;black\u0026quot;, alpha = 0.2) + geom_contour(aes(z = temp), breaks = 20, colour = \u0026quot;black\u0026quot;) + labs(y = \u0026quot;depth (m)\u0026quot;, x = NULL, fill = \u0026quot;temp. (°C)\u0026quot;) + coord_cartesian(expand = 0) Figure 4: The same temperature (°C) profiles seen in Figure 3 with a bounding box used to screen out data interpolated outside of the range of the recordings.\n Summary In this short tutorial we have seen how to create an interpolated temperature depth profile over time after a fashion very similar to the default output from ODV. We have also seen how to either fill the entire plotting area with interpolated data (Figure 3), or quickly generate a bounding box in order to remove any potential interpolation artefacts (Figure 4). I think this is a relatively straight forward work flow and would work with any tidy dataset. It is worth noting that this is not constrained to depth profiles, but would work just as well with map data. One would only need to change the date and depth variables to lon and lat.\nR is an amazingly flexible language with an incredible amount of support and I’ve yet to see it not be able to emulate, or improve upon, an analysis or graphical output from any other software.\n ","date":1498435200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1498435200,"objectID":"0a1a1627413c7c8561ce3e3ac3e4f547","permalink":"https://theoceancode.netlify.com/post/odv_figures/","publishdate":"2017-06-26T00:00:00Z","relpermalink":"/post/odv_figures/","section":"post","summary":"Objective With more and more scientists moving to open source software (i.e. R or Python) to perform their numerical analyses the opportunities for collaboration increase and we may all benefit from this enhanced productivity. At the risk of sounding sycophantic, the future of scientific research truly is in multi-disciplinary work. What then could be inhibiting this slow march towards progress? We tend to like to stick to what is comfortable.","tags":["ODV","visuals","interpolation"],"title":"ODV figures in R","type":"post"},{"authors":null,"categories":["R"],"content":" Objective Most people living in the Western World are very quick to extol the virtues of gender equality. There are however many places where this is not so. This then inevitably leads to conflict as cultures and nations are drawn closer together on our ever shrinking earth. Perhaps not the sort of conflict that leads to sabre rattling, but certainly ideological disagreements that affect policy and have real impacts on large swathes of humanity. So what is to be done? How can say how anyone else should be. There are of course all sorts of moral back and forth’s that could be pursued cyclically ad nauseum, but what if we could show quantitatively what the benefit of gender equality was to a nation and the lives of it’s people? That is the exact sort of question I like to answer here at this blog and it is a question that came up in my daily life a couple of weeks ago. Because most metrics for most countries are recorded, this is the sort of thing that can be answered. Indeed, it has been before, so here I add another take on an argument that really shouldn’t still be happening…\n Data In order to quantify the benefit of gender equality we are going to need global census data, as this is a conversation that needs to be had at a global level. Happily for us these data may be found at Clio Infra. This is an amazing web hosted database that contains an unexpected range of information as it aggregates data from many other sources. I’ll likely be going back to this data repository on multiple occasions in the future. But for now we’ll stick to gender equality. For this post we will be looking at a number of variables as this allows us to develop a more nuanced view of the relationships that exist between the wealth of nations and the egalitarianism their cultures engender. It is unfortunately not possible to show causality in the relationships we will model below but I think that educated readers will likely arrive at the same inferences as myself. Of course, if anyone has any objections, faults or errors to point out in the analysis that follows I would be very happy to hear them.\nThe data used in this blog were downloaded in “Compact” form, which comes in .xlsx format. These files were then opened and only the tab containing the data in long format were saved as a .csv file. As an aside, these data are visualised on the Clio Infra website as boxplots using what is clearly ggplot2 code. Also note that unless specified all values are taken as either women/ men or women-men. Meaning that proportions below 1, or negative values signify greater abundance for men than women in those populations.\nI’ve chosen o use the metrics seen below as I think they represent inequality between genders as well as throughout populations as a whole.\n## Load libraries library(tidyverse) library(broom) # library(RColorBrewer) ## Load data # Educational Inequality Gini Coefficient (after age 15) education_inequality \u0026lt;- read_csv(\u0026quot;../../static/data/EducationalInequalityGiniCoefficient.csv\u0026quot;) %\u0026gt;% mutate(variable = \u0026quot;education_inequality\u0026quot;) # GDP per Capita gdp_per_capita \u0026lt;- read_csv(\u0026quot;../../static/data/GDPperCapita.csv\u0026quot;) %\u0026gt;% mutate(variable = \u0026quot;gdp_per_capita\u0026quot;) # Gender Equality Years of Education (after age 15) gender_equality_education \u0026lt;- read_csv(\u0026quot;../../static/data/GenderEqualityYearsofEducation.csv\u0026quot;) %\u0026gt;% mutate(variable = \u0026quot;gender_equality_education\u0026quot;) # Historical Gender Equality Index gender_equality_index \u0026lt;- read_csv(\u0026quot;../../static/data/HistoricalGenderEqualityIndex_Compact.csv\u0026quot;) %\u0026gt;% mutate(variable = \u0026quot;gender_equality_index\u0026quot;) # Gender Equality of Numeracy gender_equality_numeracy \u0026lt;- read_csv(\u0026quot;../../static/data/GenderEqualityofNumeracy_Compact.csv\u0026quot;) %\u0026gt;% mutate(variable = \u0026quot;gender_equality_numeracy\u0026quot;) # Income Inequality income_inequality \u0026lt;- read_csv(\u0026quot;../../static/data/IncomeInequality.csv\u0026quot;) %\u0026gt;% mutate(variable = \u0026quot;income_inequality\u0026quot;) # Sex Ratio (ages 0 - 5) sex_ratio \u0026lt;- read_csv(\u0026quot;../../static/data/SexRatio_Compact.csv\u0026quot;) %\u0026gt;% mutate(variable = \u0026quot;sex_ratio\u0026quot;) # Total Population total_population \u0026lt;- read_csv(\u0026quot;../../static/data/TotalPopulation_Compact.csv\u0026quot;) %\u0026gt;% mutate(variable = \u0026quot;total_population\u0026quot;, value = scale(value)) # Scale the large range # Average Years of Education (after age 15) years_of_education \u0026lt;- read_csv(\u0026quot;../../static/data/AverageYearsofEducation.csv\u0026quot;) %\u0026gt;% mutate(variable = \u0026quot;education_years\u0026quot;) ## Create different dataframe data_long \u0026lt;- rbind(gdp_per_capita, education_inequality, gender_equality_education, gender_equality_index, gender_equality_numeracy, income_inequality, sex_ratio, total_population, years_of_education)  Analysis I recently learned how to use the dplyr pipe (%\u0026gt;%) to perform nested models and so am excited to put that to use here. Our first step is to run simple linear models for each metrics we have loaded against GDP per capita without controlling for time (year of sampling) or space (country). The GDP per capita will be correctly compared against it’s corresponding metric at that year and in that country, but we are then allowing mean values effectively to be made of these results. These models will provide us with a range of R^2 values (coefficients of determination), which is the statistic showing how much of the variance in a dependent variable is explained by the independent variable. This allows us to see which of our metrics have the strongest relationship with GDP per capita. Which we may infer as being related to the prosperity of a nation and it’s people.\n# Here we run linear models on all available data against GDP per capita # We are not controlling for country or year lm_data_all \u0026lt;- data_long %\u0026gt;% left_join(., gdp_per_capita[,-5], by = c(\u0026quot;ccode\u0026quot;, \u0026quot;country.name\u0026quot;, \u0026quot;year\u0026quot;)) %\u0026gt;% rename(., value = value.x, gdp = value.y) %\u0026gt;% group_by(variable) %\u0026gt;% mutate(n = sum(!is.na(gdp))) %\u0026gt;% ungroup() %\u0026gt;% nest(-n, -variable) %\u0026gt;% mutate(fit = map(data, ~ lm(value ~ gdp, data = .)), results = map(fit, glance)) %\u0026gt;% unnest(results) %\u0026gt;% select(n, variable, adj.r.squared, p.value) %\u0026gt;% arrange(-adj.r.squared) %\u0026gt;% filter(variable != \u0026quot;gdp_per_capita\u0026quot;) # These data are best represented with a table knitr::kable(lm_data_all, digits = 3, caption = \u0026quot;R^2 and p-values for the relationship between several metrics and GDP per capita. Years and country of sampling were not controlled for.\u0026quot;)  Table 1: R^2 and p-values for the relationship between several metrics and GDP per capita. Years and country of sampling were not controlled for.  n variable adj.r.squared p.value    1162 education_years 0.623 0.000  215 gender_equality_index 0.523 0.000  134 gender_equality_education 0.321 0.000  9779 education_inequality 0.318 0.000  656 income_inequality 0.106 0.000  348 gender_equality_numeracy 0.075 0.000  205 sex_ratio 0.053 0.001  1371 total_population -0.001 0.760    It is possible however that these relationships have not been static over time. We will also want to display the changes in the R^2 values as time series.\n# Or we may control for years of sampling # This allows us to see if the relationship changes much over time lm_data_year \u0026lt;- data_long %\u0026gt;% left_join(., gdp_per_capita[,-5], by = c(\u0026quot;ccode\u0026quot;, \u0026quot;country.name\u0026quot;, \u0026quot;year\u0026quot;)) %\u0026gt;% rename(., value = value.x, gdp = value.y) %\u0026gt;% group_by(year, variable) %\u0026gt;% mutate(n = sum(!is.na(gdp))) %\u0026gt;% ungroup() %\u0026gt;% filter(n \u0026gt; 10) %\u0026gt;% # Require at least 10 data points nest(-n, -year, -variable) %\u0026gt;% mutate(fit = map(data, ~ lm(value ~ gdp, data = .)), results = map(fit, glance)) %\u0026gt;% unnest(results) %\u0026gt;% select(n, variable, year, adj.r.squared, p.value) %\u0026gt;% arrange(-adj.r.squared) %\u0026gt;% filter(variable != \u0026quot;gdp_per_capita\u0026quot;) # And now for a time series ggplot(data = lm_data_year, aes(x = year, y = adj.r.squared)) + geom_line(aes(colour = variable)) + labs(y = \u0026quot;R^2\u0026quot;) # Or we may control for the country of sampling # This allows us to see if these relationships # differ in certain parts of the world lm_data_country \u0026lt;- data_long %\u0026gt;% left_join(., gdp_per_capita[,-5], by = c(\u0026quot;ccode\u0026quot;, \u0026quot;country.name\u0026quot;, \u0026quot;year\u0026quot;)) %\u0026gt;% rename(., value = value.x, gdp = value.y) %\u0026gt;% group_by(country.name, variable) %\u0026gt;% mutate(n = sum(!is.na(gdp))) %\u0026gt;% ungroup() %\u0026gt;% filter(n \u0026gt; 10) %\u0026gt;% # Require at least 10 data points nest(-n, -country.name, -variable) %\u0026gt;% mutate(fit = map(data, ~ lm(value ~ gdp, data = .)), results = map(fit, glance)) %\u0026gt;% unnest(results) %\u0026gt;% select(n, variable, country.name, adj.r.squared, p.value) %\u0026gt;% arrange(-adj.r.squared) %\u0026gt;% filter(variable != \u0026quot;gdp_per_capita\u0026quot;) # Create labels for figure lm_label \u0026lt;- lm_data_country %\u0026gt;% select(n, variable) %\u0026gt;% group_by(variable) %\u0026gt;% summarise(n = sum(n)) # These data allow us to display the range of R^2 values # for each country with boxplots # Just to be cheeky let\u0026#39;s use the same themeas Clio Infra ggplot(data = lm_data_country, aes(x = variable, y = adj.r.squared)) + geom_boxplot(outlier.colour = NA) + geom_point(colour = \u0026quot;steelblue\u0026quot;, alpha = 0.6, position = \u0026quot;jitter\u0026quot;) + geom_text(data = lm_label, aes(y = -0.1, label = n), colour = \u0026quot;royalblue3\u0026quot;) + labs(y = \u0026quot;R^2\u0026quot;) + theme(axis.text.x = element_text(angle = 15)) Years of education of the populace is constantly coming out on top, with gender equality in education in third. These two metrics must be related in some way though so let’s look specifically at that relationship.\ndata_gender \u0026lt;- years_of_education[,-5] %\u0026gt;% left_join(., gender_equality_education[,-5], by = c(\u0026quot;ccode\u0026quot;, \u0026quot;country.name\u0026quot;, \u0026quot;year\u0026quot;)) %\u0026gt;% rename(., education_years = value.x, gender_equality_education = value.y) data_gender \u0026lt;- data_gender[complete.cases(data_gender$gender_equality_education),] lm_data_gender1 \u0026lt;- glance(lm(gender_equality_education ~ education_years, data = data_gender)) lm_data_gender2 \u0026lt;- glance(lm(gender_equality_education ~ education_years, data = filter(data_gender, education_years \u0026gt;= 5))) # And now for a scatterplot ggplot(data = data_gender, aes(x = education_years, y = gender_equality_education)) + geom_point() + geom_smooth(colour = \u0026quot;blue\u0026quot;, method = \u0026quot;lm\u0026quot;) + geom_smooth(data = filter(data_gender, education_years \u0026gt;= 5), colour = \u0026quot;red\u0026quot;, method = \u0026quot;lm\u0026quot;) + geom_label(aes(x = 8.5, y = 0.5, label = paste0(\u0026quot;blue line\\nR^2 = \u0026quot;, round(lm_data_gender1$adj.r.squared,3), \u0026quot;\\nred line\\nR^2 = \u0026quot;, round(lm_data_gender2$adj.r.squared,3))))  Results From Table 1 we may see that the three metrics in descending order that best explain the variance occurring in GDP per capita over time and space are: education of the population as a whole, equality between the genders and the equality in education between the genders. Equality in education for the populace as a whole came in at a close fourth and is perhaps a better predictor than equality between genders due to the much higher sample size that the result is based on (this is an oddly well reported metric). The metrics of income inequality for the populace as a whole, equality in numeracy between genders, and the ratio of sex near birth showed significant relationships with GDP per capita but explained little of the variance. The total population of a country has absolutely nothing to do with the GDP per capita when time and space are not controlled for.\nWe see in Figure 1 that for our top four metrics (education_years, gender_equality_index, gender_equality_education and education_inequality), only education_years shows any consistency over time. We also see that education_inequality has become a much better test of the GDP per capita of a country since the mid 19th century.\nFigure 2 shows that there is a very large range in the relationship between many of these metrics and GDP per capita when we control for country of measurement. Interestingly, the total_population of the country is relevant to the GDP per capita when this information is analysed independently by each country. More important than total_population we see are the metrics education_years and gender_equality_index.\nWhen we look at the specific relationship between education_years and gender_equality_education it would at first appear that at an R^2 value of 0.518 this was a strong relationship. Looking more closely at Figure 3 one will notice that this relationship is not linear and that the fit of the linear model is being affected by several scores at very low education levels and equality scores. If one were to only account for scores where the education_years metric is at least 5 years the strength of the relationship falls dramatically to R^2 = 0.199.\n Discussion If one was satisfied to take all of the GDP data and the several metrics of equality used in this analysis and clump them together one would be led to believe that the most important thing for a prosperous society is the overall years of education for that countries citizens. This metric is clearly the most important in Table 1, Figure 1 and Figure 2. Equality in education between the genders is also of great importance, though perhaps half as much so as the overall education of the populace. It leads that a society with more equitable education levels between genders would have a greater proportion of educated people and this is generally so however, Figure 3 shows that if one removes scores from nations with particularly low levels of overall education this relationship falls apart. This is because most countries in the world have relatively even levels of education between genders. There is little pattern here because there is little variance in gender_equality_education once the less educated nations have been removed from the calculation.\nMore important to GDP than equal education for genders appears to be the overall equality between genders. This value accounts for much more than education alone and appears to better capture how an egalitarian society benefits from the equal treatment of it’s citizens. Clio Infra states that this metric represents:\n The composite index aims to evaluate countries’ performances regarding the progress they made in closing the gender gap in the fields of health, socio-economic resources, politics and household since 1950\n When I started this research I had assumed that equal education between genders would clearly be a very important metric in regards to a prosperous society. Surprisingly this appears to not be as concrete as expected. It certainly is important, more so than income inequality, for example, but is not as important as the overall equality between the genders. This finding is deceiving though because the equality in education for most countries (not just rich ones) is high. It is the difference in equality between genders generally that shows a broader range, and the difference relates strongly to GDP per capita. So a potential recipe for success seems to be to first ensure that as much of a populace as possible (of all genders) receives as much education as possible. It seems likely that this would then fuel gender equality, but the data don’t show this unilaterally. So to really move a nation to the top of the GDP per capita list would also require an active effort in ensuring well rounded rights to all genders.\n ","date":1497225600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1497225600,"objectID":"0aa0e1bb554a8306a750de11cee7e447","permalink":"https://theoceancode.netlify.com/post/gender_gdp/","publishdate":"2017-06-12T00:00:00Z","relpermalink":"/post/gender_gdp/","section":"post","summary":"Objective Most people living in the Western World are very quick to extol the virtues of gender equality. There are however many places where this is not so. This then inevitably leads to conflict as cultures and nations are drawn closer together on our ever shrinking earth. Perhaps not the sort of conflict that leads to sabre rattling, but certainly ideological disagreements that affect policy and have real impacts on large swathes of humanity.","tags":["gender","gdp"],"title":"Gender and GDP","type":"post"},{"authors":null,"categories":["R"],"content":" Objective As more and more physical scientists (e.g. oceanographers) move to R from other object oriented command line programming languages, such as Matlab, there will be more and more demand for the code that is needed to do some basic things that they may already know how to do in their previous languages that they don’t yet know how to do in R. Surprisingly, there are many things that should be very easy to find how to do in R that are not. Or are at least not widely publicized. One such example is how to plot wind vectors as a time series. This is a very necessary part of any analysis of the wind or currents in a particular area. Making it useful broadly to most climate scientists. Try as I might, I’ve only been able to find one source that gives an example of how to plot wind (or current) vectors as a time series with ggplot2 in R. Having now been asked how to do this by several people I thought it would be useful to write up my workflow and put it on the internet so that there is one more source that people searching for answers may find.\n Data The data used in this example come from the ERA-Interim reanalysis product. This is an amazing product with dozens of data layers stretched over an even global grid at a native resolution of 0.75°. Here we use the one pixel from this product closest to Cape Town in order to illustrate how to use these data as a time series for a single point in space at a daily resolution for one month (December, 2016). For the purposes of this example we will only be using the following three layers: ‘2 metre temperature’, ‘10 metre U wind component’ and ‘10 metre V wind component’. The data used in this post may be downloaded here.\n# First load libraries library(tidyverse) library(scales) # Then data load(\u0026#39;../../static/data/ERA_pixel.Rdata\u0026#39;)  Wind Vectors The data as they exist within ERA-Interim are already in the format that we need. U and V vectors. Had they not been then we would have needed to convert them. The other common format for wind data are bearing (degrees) and speed (m/s). With this information it is possible to use trigonometry to create the necessary U and V vectors. One may do so with the following chunk of code:\n## Assuming your data frame is called \u0026#39;my_df\u0026#39; # First it is necessary to correct any bearings of \u0026#39;0\u0026#39; to \u0026#39;360\u0026#39; my_df$bearing[my_df$bearing == 0] \u0026lt;- 360 my_df$u \u0026lt;- (1 * my_df$speed) * sin((my_df$bearing * pi / 180.0)) my_df$v \u0026lt;- (1 * my_df$speed) * cos((my_df$bearing * pi / 180.0)) Assuming that we now have a u and v column in our wind vector data frame, and that the speed of these vectors are in metres per second, we may now use the functionality within ggplot2 to create our wind vector time series. It’s almost anti-climactic how straight forward it all is.\n Plotting As we will be using geom_segment() within ggplot2 to create our wind vectors we will want to maintain some control over the output by introducing a scaling object and a default range for the y axis. For now we will just set the wind scalar to 1. We’ll change it later to see what benefit this extra step adds. I have chosen the range of values for the y_axis below based on what I knew would illustrate my point, not through any a priori statistical analysis.\nwind_scale \u0026lt;- 1 y_axis \u0026lt;- seq(-5, 5, 5) To create a wind vector time series we use the following few lines of code:\nggplot(data = ERA_pixel, aes(x = date, y = y_axis)) + # Here we create the wind vectors as a series of segments with arrow tips geom_segment(aes(x = date, xend = date + u*wind_scale, y = 0, yend = v*wind_scale), arrow = arrow(length = unit(0.15, \u0026#39;cm\u0026#39;)), size = 0.5, alpha = 0.7) + # I think adding points at the base of the vectors makes the figure easier to read geom_point(aes(x = date, y = 0), alpha = 0.5, size = 1) + # Changing the dates to better match the range shown on the x axis scale_x_date(labels = date_format(\u0026#39;%Y-%m-%d\u0026#39;), breaks = date_breaks(\u0026#39;4 days\u0026#39;)) + # Change the y axis labels to make sense scale_y_continuous(breaks = y_axis, labels = as.character(abs(y_axis)/wind_scale)) + # Change the x and y axis labels labs(x = NULL, y = \u0026#39;Wind Speed (m/s)\u0026#39;) + coord_equal(ylim = c(min(y_axis/wind_scale), max(y_axis/wind_scale))) + theme(axis.text.x = element_text(angle = 20, hjust = 0.4, vjust = 0.5, size = 8), axis.text.y = element_text(size = 8)) Visualizing wind data in this way introduces a problem into our figure that we do not normally need to contend with when we create time series figures. That problem is that wind speed/ bearing is a two dimensional value, not one dimensional. Therefore the y axis as well as the x axis must be utilized in order to show the wind speed/ bearing accurately. We find a compromise by using coord_equal() to ensure that every step on the x axis is the same size as the y axis. Thus preventing any distortion of vectors that are showing mostly an East/ West heading.\nFor particularly windy parts of the world (such as Cape Town) it may be better to scale the wind vectors so as to help them to look a bit more tidy. But if we do this, our x and y axis relationship will no longer be 1 for 1, as with the figure above. That is where our decision to set a static wind scalar and y axis come into play.\n# Reset the wind scalar to be half the size wind_scale \u0026lt;- 0.5 # The exact same code as above ggplot(data = ERA_pixel, aes(x = date, y = y_axis)) + geom_segment(aes(x = date, xend = date + u, y = 0, yend = v), arrow = arrow(length = unit(0.15, \u0026#39;cm\u0026#39;)), size = 0.5, alpha = 0.7) + geom_point(aes(x = date, y = 0), alpha = 0.5, size = 1) + scale_x_date(labels = date_format(\u0026#39;%Y-%m-%d\u0026#39;), breaks = date_breaks(\u0026#39;4 days\u0026#39;)) + scale_y_continuous(breaks = y_axis/wind_scale, labels = as.character(abs(y_axis)/wind_scale)) + labs(x = NULL, y = \u0026#39;Wind Speed (m/s)\u0026#39;) + coord_equal(ylim = c(min(y_axis/wind_scale), max(y_axis/wind_scale))) + theme(axis.text.x = element_text(angle = 20, hjust = 0.4, vjust = 0.5, size = 8), axis.text.y = element_text(size = 8)) By assigning our scaling variable to an object and using it to control the y axis of our ggplot code we may be sure that no matter how we choose to scale our wind variables they will be correctly represented. This does however limit how large our y axis may be as it must be kept to the same ratio as the x axis. Any larger than the figure shown above and we would start to have unappealingly square figures.\n Multiple Y Axes While it may be frowned upon in the tidyverse, there are still many people that like to use multiple y axes within one figure. I’m not going to get into the pro’s and con’s here, but I will say that of all the possible reasons for using multiple y axes, comparing wind vectors against some other variable is more reasonable than most. This is because the wind vectors themselves do not really have a y axis per se. As we’ve seen above, the actual values on the y axis don’t matter as long as they are shown 1 for 1 against whatever is on the x axis. Therefore we may very easily show temperature on the y axis and still overplot wind vectors without needing a proper second y axis. We will however insert a label onto the figure so as to make it clear how the wind vectors are to be estimated.\n# Reset the wind scale to 1 wind_scale \u0026lt;- 1 # Now we use temperature for the y axis, so some things must change ggplot(data = ERA_pixel, aes(x = date, y = temp)) + geom_line(colour = \u0026#39;salmon\u0026#39;, show.legend = F, size = 1.5) + geom_segment(aes(x = date, xend = date + u, y = mean(temp, na.rm = T), yend = mean(temp, na.rm = T) +v), arrow = arrow(length = unit(0.15, \u0026#39;cm\u0026#39;)), size = 0.5, alpha = 0.7) + geom_point(aes(x = date, y = mean(temp, na.rm = T)), alpha = 0.5, size = 1) + # Create the label box for our wind vector length legend geom_label(aes(x = as.Date(\u0026#39;2016-12-04\u0026#39;), y = 22, label = \u0026#39; 4 m/s \\n\u0026#39;), size = 5) + # Create the segment for the wind vector legend geom_segment(aes(x = as.Date(\u0026#39;2016-12-02\u0026#39;), xend = as.Date(\u0026#39;2016-12-06\u0026#39;), y = 21.4, yend = 21.4), size = 0.5, alpha = 0.7) + scale_x_date(labels = date_format(\u0026#39;%Y-%m-%d\u0026#39;), breaks = date_breaks(\u0026#39;4 days\u0026#39;)) + labs(x = NULL, y = \u0026#39;Temperature (°C)\u0026#39;) + # Here we choose to allow ggplot to determine the best range for y axis values coord_equal() + theme(axis.text.x = element_text(angle = 20, hjust = 0.4, vjust = 0.5, size = 8), axis.text.y = element_text(size = 8)) I’ll leave it to the reader to decide if this is a reasonable way to visualise these data. But I do know that there is some use for displaying the information in this way. For example, one can clearly see that on days were the temperature decreases rapidly there is a south westerly wind moving over the city. Of course this could still be elucidated were these two figures plotted next to each other via facets, but it should be noted that it isn’t necessary.\n ","date":1497225600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1497225600,"objectID":"404885e3e220fad7e78559ebcb560ee2","permalink":"https://theoceancode.netlify.com/post/wind_vectors/","publishdate":"2017-06-12T00:00:00Z","relpermalink":"/post/wind_vectors/","section":"post","summary":"Objective As more and more physical scientists (e.g. oceanographers) move to R from other object oriented command line programming languages, such as Matlab, there will be more and more demand for the code that is needed to do some basic things that they may already know how to do in their previous languages that they don’t yet know how to do in R. Surprisingly, there are many things that should be very easy to find how to do in R that are not.","tags":["visuals","wind"],"title":"Wind Vector Time Series","type":"post"},{"authors":null,"categories":["R"],"content":" Objective Before we begin, I would like to acknowledge that the framework for this analysis was adapted from a blogpost found on the wonderfully interesting R-bloggers website. The objective of this analysis is to use sentiment analysis on different religious texts to visualise the differences/ similarities between them. This concept is of course fraught with a host of issues. Not least of which being detractors who will likely not endeavour to engage in rational debate against the findings of this work. This is of course beyond the control of the experimental design so I rather focus here on the issue that the translations of the texts used are not modern, and none of them were written (and generally not intended to be read in) English. Therefore a sentiment analysis of these works will be given to a certain amount of inaccuracy because the sentiment database is a recent project and one must assume that the emotions attached to the words in the English language reflect modern sentiment, and not the emotive responses that were necessarily desired at the time of writing/ translation. That being said, the sentiment that these texts would elicit in a reader today (assuming that anyone actually still reads the source material for their faith) would be accurately reflected by the sentiment analysis project and so this issue is arguably a minor one. As a control group (non-religious text), we will be using Pride and Prejudice, by Jane Austen simply because this has already been ported into R and is readily accesible in the package janeaustenr.\nFor more information on the sentiment analysis project one may find the home page here.\n Text Downloads The following links were used to download the religious texts used in this analysis:\n Quran Bible(New Testament) Torah Bhagavad Gita Egyptian Book of the Dead  I generally used the first link that DuckDuckGo provided when searching for pdf versions of these books. If anyone knows of better sources for these texts please let me know and I would be happy to update the data source.\n Packages The packages required to perform the following analysis\nlibrary(pdftools) library(tidyverse) library(tidytext) library(janeaustenr) library(heatwaveR)  Analysis First we convert the PDF’s to text and merge them.\n## Load the texts # Pride and Prejudice pride \u0026lt;- tibble(txt = prideprejudice, src = \u0026quot;pride\u0026quot;) # Quran quran \u0026lt;- tibble(txt = as.character(pdf_text(\u0026quot;../../static/data/EQuran.pdf\u0026quot;)), src = \u0026quot;quran\u0026quot;) # Bible bible \u0026lt;- tibble(txt = as.character(pdf_text(\u0026quot;../../static/data/KJBNew.pdf\u0026quot;)), src = \u0026quot;bible\u0026quot;) # Torah torah \u0026lt;- tibble(txt = as.character(pdf_text(\u0026quot;../../static/data/Torah.pdf\u0026quot;)), src = \u0026quot;torah\u0026quot;) # Bhagavad Gita gita \u0026lt;- tibble(txt = as.character(pdf_text(\u0026quot;../../static/data/BGita.pdf\u0026quot;)), src = \u0026quot;gita\u0026quot;) # Book of the dead dead \u0026lt;- data_frame(txt = as.character(pdf_text(\u0026quot;../../static/data/EBoD.pdf\u0026quot;)), src = \u0026quot;dead\u0026quot;) # Combine texts \u0026lt;- rbind(pride, quran, bible, torah, gita, dead) Then we must download the NRC Word-Emotion Association Lexicon(Mohammad and Turney 2013).\n# Note that this will require you to agree to term of use nrc_sentiment \u0026lt;- get_sentiments(\u0026quot;nrc\u0026quot;) nrc_sentiment \u0026lt;- readRDS(\u0026quot;../../static/data/nrc_sentiment.Rds\u0026quot;) After loading and merging the texts we want to run some quick word counts on them.\n# Total relevant words per text total_word_count \u0026lt;- texts %\u0026gt;% unnest_tokens(word, txt) %\u0026gt;% anti_join(stop_words, by = \u0026quot;word\u0026quot;) %\u0026gt;% filter(!grepl(\u0026#39;[0-9]\u0026#39;, word)) %\u0026gt;% filter(!grepl(\u0026#39;www.christistheway.com\u0026#39;, word)) %\u0026gt;% left_join(nrc_sentiment, by = \u0026quot;word\u0026quot;) %\u0026gt;% group_by(src) %\u0026gt;% summarise(total = n()) %\u0026gt;% ungroup() # Total emotive words per text emotive_word_count \u0026lt;- texts %\u0026gt;% unnest_tokens(word, txt) %\u0026gt;% anti_join(stop_words, by = \u0026quot;word\u0026quot;) %\u0026gt;% filter(!grepl(\u0026#39;[0-9]\u0026#39;, word)) %\u0026gt;% filter(!grepl(\u0026#39;www.christistheway.com\u0026#39;, word)) %\u0026gt;% left_join(nrc_sentiment, by = \u0026quot;word\u0026quot;) %\u0026gt;% filter(!(sentiment == \u0026quot;negative\u0026quot; | sentiment == \u0026quot;positive\u0026quot; | sentiment == \u0026quot;NA\u0026quot;)) %\u0026gt;% group_by(src) %\u0026gt;% summarise(emotions = n()) %\u0026gt;% ungroup() # Positivity proportion positivity_word_count \u0026lt;- texts %\u0026gt;% unnest_tokens(word, txt) %\u0026gt;% anti_join(stop_words, by = \u0026quot;word\u0026quot;) %\u0026gt;% filter(!grepl(\u0026#39;[0-9]\u0026#39;, word)) %\u0026gt;% filter(!grepl(\u0026#39;www.christistheway.com\u0026#39;, word)) %\u0026gt;% left_join(nrc_sentiment, by = \u0026quot;word\u0026quot;) %\u0026gt;% filter(sentiment == \u0026quot;positive\u0026quot; | sentiment == \u0026quot;negative\u0026quot;) %\u0026gt;% group_by(src, sentiment) %\u0026gt;% summarise(emotions = n()) %\u0026gt;% summarise(positivity = emotions[sentiment == \u0026quot;positive\u0026quot;]/ emotions[sentiment == \u0026quot;negative\u0026quot;]) %\u0026gt;% ungroup() # Combine word_count \u0026lt;- cbind(total_word_count, emotive_word_count[2], positivity_word_count[2]) %\u0026gt;% mutate(proportion = round(emotions/total, 2)) # Lolliplot ggplot(data = word_count, aes(x = as.factor(src), y = proportion)) + geom_lolli(colour = \u0026quot;black\u0026quot;) + geom_point(aes(colour = positivity)) + geom_text(aes(y = 0.45, label = paste0(\u0026quot;n = \u0026quot;, total))) + scale_y_continuous(limits = c(0,0.5), expand = c(0, 0)) + scale_color_continuous(\u0026quot;Proportion of\\nPositivity\u0026quot;, low = \u0026quot;navy\u0026quot;, high = \u0026quot;pink\u0026quot;) + labs(x = \u0026quot;Text\u0026quot;, y = \u0026quot;Proportion of Emotive Words\u0026quot;)  Figure 1: Proportion of emotive words in each text to their total word counts (shown in red).  I find it somewhat surprising that The Egyptian Book of the Dead would have the highest proportion of positive sentiment to negative sentiment.\nBut let’s take a more in depth look at the sentiment for each text.\n# Calculate emotions emotions \u0026lt;- texts %\u0026gt;% unnest_tokens(word, txt) %\u0026gt;% anti_join(stop_words, by = \u0026quot;word\u0026quot;) %\u0026gt;% filter(!grepl(\u0026#39;[0-9]\u0026#39;, word)) %\u0026gt;% filter(!grepl(\u0026#39;King James Version of the New Testament - \u0026#39;, word)) %\u0026gt;% filter(!grepl(\u0026#39;www.christistheway.com\u0026#39;, word)) %\u0026gt;% filter(!grepl(\u0026#39;BHAGAVAD GITA\u0026#39;, word)) %\u0026gt;% left_join(nrc_sentiment, by = \u0026quot;word\u0026quot;) %\u0026gt;% filter(!(sentiment == \u0026quot;negative\u0026quot; | sentiment == \u0026quot;positive\u0026quot;)) %\u0026gt;% group_by(src, sentiment) %\u0026gt;% summarize(freq = n()) %\u0026gt;% mutate(proportion = round(freq/sum(freq),2)) %\u0026gt;% # select(-freq) %\u0026gt;% ungroup() # Boxplot ggplot(emotions, aes(x = sentiment, y = proportion)) + geom_boxplot(fill = \u0026quot;grey70\u0026quot;) + geom_point(aes(colour = src), position = \u0026quot;jitter\u0026quot;, size = 2) + labs(x = \u0026quot;Sentiment\u0026quot;, y = \u0026quot;Proportion\u0026quot;, colour = \u0026quot;Text\u0026quot;)  Figure 2: Boxplots of emotion for the texts. Individual scores shown as coloured points.  ggplot(emotions, aes(x = sentiment, y = proportion)) + geom_polygon(aes(fill = src, group = src), alpha = 0.8, show.legend = FALSE) + coord_polar() + scale_y_continuous(limits = c(0, 0.3)) + facet_wrap(~src) + labs(x = \u0026quot;\u0026quot;, y = \u0026quot;\u0026quot;)  Figure 3: Frequency polygons of the proportion of emotions for each text shown in facets.   Results The frequency polygons shown here most notably outline that all of the texts emphasise trust over anything else. Another interesting pattern is the lack of surprise employed in the texts. The Bhagavad Gita seems to have the smoothest distribution of emotion, with the Quran perhaps coming in second. I found it odd that a novel, Pride and Prejudice, would employ a higher proportion of joyous sentiment than the religious texts against which it was compared. The Quran just barely nudges out the Bhagavad Gita to come out on top for angry and fearful sentiment. The Torah stands out from the other texts due to the amount of disgust expressed therein. After Pride and Prejudice, the Bible uses the largest proportion of words that elicited emotions of anticipation.\nThere is still much more that may or may not be deduced from these cursory results. Most notably lacking from this analysis is any test for significant differences. The reason for that being that I am not interested in supporting any sort of argument for differences between these texts. With n values (word count) in excess of 3,000 significant differences between the different texts is almost guaranteed as well so any use of a p-value here would just be cheap p-hacking anyway.\n References Mohammad, Saif M., and Peter D. Turney. 2013. “Crowdsourcing a Word-Emotion Association Lexicon.” Computational Intelligence 29 (3): 436–65. https://doi.org/10.1111/j.1467-8640.2012.00460.x.\n   ","date":1494806400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1494806400,"objectID":"5483215b09c94c0d65e66b2140ba01eb","permalink":"https://theoceancode.netlify.com/post/religious_sentiment/","publishdate":"2017-05-15T00:00:00Z","relpermalink":"/post/religious_sentiment/","section":"post","summary":"Objective Before we begin, I would like to acknowledge that the framework for this analysis was adapted from a blogpost found on the wonderfully interesting R-bloggers website. The objective of this analysis is to use sentiment analysis on different religious texts to visualise the differences/ similarities between them. This concept is of course fraught with a host of issues. Not least of which being detractors who will likely not endeavour to engage in rational debate against the findings of this work.","tags":["religion","text mining","sentiment analysis"],"title":"Religious sentiment","type":"post"},{"authors":["RW Schlegel","ECJ Oliver","T Wernberg","AJ Smit"],"categories":null,"content":"","date":1484020800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1484020800,"objectID":"23ea356d126b6305a8c493cb8e58c32a","permalink":"https://theoceancode.netlify.com/publication/cooccurrence/","publishdate":"2017-01-10T00:00:00-04:00","relpermalink":"/publication/cooccurrence/","section":"publication","summary":"A changing global climate places shallow water ecosystems at more risk than those in the open ocean as their temperatures may change more rapidly and dramatically. To this end, it is necessary to identify the occurrence of extreme ocean temperature events – marine heatwaves (MHWs) and marine cold-spells (MCSs) – in the nearshore (","tags":["R","coastal"],"title":"Nearshore and offshore co-occurrence of marine heatwaves and cold-spells","type":"publication"},{"authors":["RW Schlegel","AJ Smit"],"categories":null,"content":"","date":1481774400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1481774400,"objectID":"7ada37b9b35f6bf1c621e5e5947cc974","permalink":"https://theoceancode.netlify.com/publication/trend-analysis/","publishdate":"2016-12-15T00:00:00-04:00","relpermalink":"/publication/trend-analysis/","section":"publication","summary":"In South Africa, 129 in situ temperature time series of up to 43 years are used for investigations of the thermal characteristics of coastal seawater. They are collected with handheld thermometers or underwater temperature recorders (UTRs) and are recorded at precisions from 0.5° to 0.001°C. Using the natural range of seasonal signals and variability for 84 of these time series, their length, decadal trend, and data precision were systematically varied before fitting generalized least squares (GLS) models to study the effect these variables have on trend detection. The variables that contributed most to accurate trend detection, in decreasing order, were time series length, decadal trend, variance, percentage of missing data (% NA), and measurement precision. Time series greater than 30 years in length are preferred and although larger decadal trends are modeled more accurately, modeled significance (p value) is largely affected by the variance present. The risk of committing both type-1 and type-2 errors increases when ≥5% NA is present. There is no appreciable effect on model accuracy between measurement precision of 0.1°–0.001°C. Measurement precisions of 0.5°C require longer time series to give equally accurate model results. The implication is that the thermometer time series in this dataset, and others around the world, must be at least two years longer than their UTR counterparts to be useful for decadal-scale climate change studies. Furthermore, adding older lower-precision UTR data to newer higher-precision UTR data within the same time series will increase their usefulness for this purpose.","tags":["time series analysis","R"],"title":"Climate Change in Coastal Waters: Time Series Properties Affecting Trend Estimation","type":"publication"}]